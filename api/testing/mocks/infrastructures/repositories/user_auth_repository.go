// Code generated by MockGen. DO NOT EDIT.
// Source: infrastructures/repositories/user_auth_repository.go

// Package mock_repositories is a generated GoMock package.
package mock_repositories

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	dbmodels "github.com/hiroyky/famiphoto/infrastructures/dbmodels"
)

// MockUserAuthRepository is a mock of UserAuthRepository interface.
type MockUserAuthRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserAuthRepositoryMockRecorder
}

// MockUserAuthRepositoryMockRecorder is the mock recorder for MockUserAuthRepository.
type MockUserAuthRepositoryMockRecorder struct {
	mock *MockUserAuthRepository
}

// NewMockUserAuthRepository creates a new mock instance.
func NewMockUserAuthRepository(ctrl *gomock.Controller) *MockUserAuthRepository {
	mock := &MockUserAuthRepository{ctrl: ctrl}
	mock.recorder = &MockUserAuthRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserAuthRepository) EXPECT() *MockUserAuthRepositoryMockRecorder {
	return m.recorder
}

// DeleteClientAllAuth mocks base method.
func (m *MockUserAuthRepository) DeleteClientAllAuth(ctx context.Context, clientID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteClientAllAuth", ctx, clientID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteClientAllAuth indicates an expected call of DeleteClientAllAuth.
func (mr *MockUserAuthRepositoryMockRecorder) DeleteClientAllAuth(ctx, clientID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClientAllAuth", reflect.TypeOf((*MockUserAuthRepository)(nil).DeleteClientAllAuth), ctx, clientID)
}

// DeleteUserAuth mocks base method.
func (m *MockUserAuthRepository) DeleteUserAuth(ctx context.Context, userID, clientID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserAuth", ctx, userID, clientID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserAuth indicates an expected call of DeleteUserAuth.
func (mr *MockUserAuthRepositoryMockRecorder) DeleteUserAuth(ctx, userID, clientID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserAuth", reflect.TypeOf((*MockUserAuthRepository)(nil).DeleteUserAuth), ctx, userID, clientID)
}

// GetUserAuth mocks base method.
func (m *MockUserAuthRepository) GetUserAuth(ctx context.Context, userID, clientID string) (*dbmodels.UserAuth, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserAuth", ctx, userID, clientID)
	ret0, _ := ret[0].(*dbmodels.UserAuth)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserAuth indicates an expected call of GetUserAuth.
func (mr *MockUserAuthRepositoryMockRecorder) GetUserAuth(ctx, userID, clientID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserAuth", reflect.TypeOf((*MockUserAuthRepository)(nil).GetUserAuth), ctx, userID, clientID)
}

// GetUserAuthByRefreshToken mocks base method.
func (m *MockUserAuthRepository) GetUserAuthByRefreshToken(ctx context.Context, refreshToken string) (*dbmodels.UserAuth, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserAuthByRefreshToken", ctx, refreshToken)
	ret0, _ := ret[0].(*dbmodels.UserAuth)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserAuthByRefreshToken indicates an expected call of GetUserAuthByRefreshToken.
func (mr *MockUserAuthRepositoryMockRecorder) GetUserAuthByRefreshToken(ctx, refreshToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserAuthByRefreshToken", reflect.TypeOf((*MockUserAuthRepository)(nil).GetUserAuthByRefreshToken), ctx, refreshToken)
}

// UpsertUserAuth mocks base method.
func (m_2 *MockUserAuthRepository) UpsertUserAuth(ctx context.Context, m *dbmodels.UserAuth, refreshTokenRaw string) (*dbmodels.UserAuth, error) {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "UpsertUserAuth", ctx, m, refreshTokenRaw)
	ret0, _ := ret[0].(*dbmodels.UserAuth)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertUserAuth indicates an expected call of UpsertUserAuth.
func (mr *MockUserAuthRepositoryMockRecorder) UpsertUserAuth(ctx, m, refreshTokenRaw interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertUserAuth", reflect.TypeOf((*MockUserAuthRepository)(nil).UpsertUserAuth), ctx, m, refreshTokenRaw)
}
