// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces/http/controllers/upload_controller.go

// Package mock_controllers is a generated GoMock package.
package mock_controllers

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	echo "github.com/labstack/echo/v4"
)

// MockUploadController is a mock of UploadController interface.
type MockUploadController struct {
	ctrl     *gomock.Controller
	recorder *MockUploadControllerMockRecorder
}

// MockUploadControllerMockRecorder is the mock recorder for MockUploadController.
type MockUploadControllerMockRecorder struct {
	mock *MockUploadController
}

// NewMockUploadController creates a new mock instance.
func NewMockUploadController(ctrl *gomock.Controller) *MockUploadController {
	mock := &MockUploadController{ctrl: ctrl}
	mock.recorder = &MockUploadControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUploadController) EXPECT() *MockUploadControllerMockRecorder {
	return m.recorder
}

// UploadPhoto mocks base method.
func (m *MockUploadController) UploadPhoto(ctx echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadPhoto", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// UploadPhoto indicates an expected call of UploadPhoto.
func (mr *MockUploadControllerMockRecorder) UploadPhoto(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadPhoto", reflect.TypeOf((*MockUploadController)(nil).UploadPhoto), ctx)
}
