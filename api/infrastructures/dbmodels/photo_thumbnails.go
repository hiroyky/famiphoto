// Code generated by SQLBoiler 4.18.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbmodels

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// PhotoThumbnail is an object representing the database table.
type PhotoThumbnail struct {
	PhotoID       int       `boil:"photo_id" json:"photo_id" toml:"photo_id" yaml:"photo_id"`
	ThumbnailName string    `boil:"thumbnail_name" json:"thumbnail_name" toml:"thumbnail_name" yaml:"thumbnail_name"`
	FilePath      string    `boil:"file_path" json:"file_path" toml:"file_path" yaml:"file_path"`
	CreatedAt     time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt     time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *photoThumbnailR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L photoThumbnailL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PhotoThumbnailColumns = struct {
	PhotoID       string
	ThumbnailName string
	FilePath      string
	CreatedAt     string
	UpdatedAt     string
}{
	PhotoID:       "photo_id",
	ThumbnailName: "thumbnail_name",
	FilePath:      "file_path",
	CreatedAt:     "created_at",
	UpdatedAt:     "updated_at",
}

var PhotoThumbnailTableColumns = struct {
	PhotoID       string
	ThumbnailName string
	FilePath      string
	CreatedAt     string
	UpdatedAt     string
}{
	PhotoID:       "photo_thumbnails.photo_id",
	ThumbnailName: "photo_thumbnails.thumbnail_name",
	FilePath:      "photo_thumbnails.file_path",
	CreatedAt:     "photo_thumbnails.created_at",
	UpdatedAt:     "photo_thumbnails.updated_at",
}

// Generated where

var PhotoThumbnailWhere = struct {
	PhotoID       whereHelperint
	ThumbnailName whereHelperstring
	FilePath      whereHelperstring
	CreatedAt     whereHelpertime_Time
	UpdatedAt     whereHelpertime_Time
}{
	PhotoID:       whereHelperint{field: "`photo_thumbnails`.`photo_id`"},
	ThumbnailName: whereHelperstring{field: "`photo_thumbnails`.`thumbnail_name`"},
	FilePath:      whereHelperstring{field: "`photo_thumbnails`.`file_path`"},
	CreatedAt:     whereHelpertime_Time{field: "`photo_thumbnails`.`created_at`"},
	UpdatedAt:     whereHelpertime_Time{field: "`photo_thumbnails`.`updated_at`"},
}

// PhotoThumbnailRels is where relationship names are stored.
var PhotoThumbnailRels = struct {
	Photo string
}{
	Photo: "Photo",
}

// photoThumbnailR is where relationships are stored.
type photoThumbnailR struct {
	Photo *Photo `boil:"Photo" json:"Photo" toml:"Photo" yaml:"Photo"`
}

// NewStruct creates a new relationship struct
func (*photoThumbnailR) NewStruct() *photoThumbnailR {
	return &photoThumbnailR{}
}

func (r *photoThumbnailR) GetPhoto() *Photo {
	if r == nil {
		return nil
	}
	return r.Photo
}

// photoThumbnailL is where Load methods for each relationship are stored.
type photoThumbnailL struct{}

var (
	photoThumbnailAllColumns            = []string{"photo_id", "thumbnail_name", "file_path", "created_at", "updated_at"}
	photoThumbnailColumnsWithoutDefault = []string{"photo_id", "thumbnail_name", "file_path"}
	photoThumbnailColumnsWithDefault    = []string{"created_at", "updated_at"}
	photoThumbnailPrimaryKeyColumns     = []string{"photo_id", "thumbnail_name"}
	photoThumbnailGeneratedColumns      = []string{}
)

type (
	// PhotoThumbnailSlice is an alias for a slice of pointers to PhotoThumbnail.
	// This should almost always be used instead of []PhotoThumbnail.
	PhotoThumbnailSlice []*PhotoThumbnail
	// PhotoThumbnailHook is the signature for custom PhotoThumbnail hook methods
	PhotoThumbnailHook func(context.Context, boil.ContextExecutor, *PhotoThumbnail) error

	photoThumbnailQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	photoThumbnailType                 = reflect.TypeOf(&PhotoThumbnail{})
	photoThumbnailMapping              = queries.MakeStructMapping(photoThumbnailType)
	photoThumbnailPrimaryKeyMapping, _ = queries.BindMapping(photoThumbnailType, photoThumbnailMapping, photoThumbnailPrimaryKeyColumns)
	photoThumbnailInsertCacheMut       sync.RWMutex
	photoThumbnailInsertCache          = make(map[string]insertCache)
	photoThumbnailUpdateCacheMut       sync.RWMutex
	photoThumbnailUpdateCache          = make(map[string]updateCache)
	photoThumbnailUpsertCacheMut       sync.RWMutex
	photoThumbnailUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var photoThumbnailAfterSelectMu sync.Mutex
var photoThumbnailAfterSelectHooks []PhotoThumbnailHook

var photoThumbnailBeforeInsertMu sync.Mutex
var photoThumbnailBeforeInsertHooks []PhotoThumbnailHook
var photoThumbnailAfterInsertMu sync.Mutex
var photoThumbnailAfterInsertHooks []PhotoThumbnailHook

var photoThumbnailBeforeUpdateMu sync.Mutex
var photoThumbnailBeforeUpdateHooks []PhotoThumbnailHook
var photoThumbnailAfterUpdateMu sync.Mutex
var photoThumbnailAfterUpdateHooks []PhotoThumbnailHook

var photoThumbnailBeforeDeleteMu sync.Mutex
var photoThumbnailBeforeDeleteHooks []PhotoThumbnailHook
var photoThumbnailAfterDeleteMu sync.Mutex
var photoThumbnailAfterDeleteHooks []PhotoThumbnailHook

var photoThumbnailBeforeUpsertMu sync.Mutex
var photoThumbnailBeforeUpsertHooks []PhotoThumbnailHook
var photoThumbnailAfterUpsertMu sync.Mutex
var photoThumbnailAfterUpsertHooks []PhotoThumbnailHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *PhotoThumbnail) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range photoThumbnailAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *PhotoThumbnail) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range photoThumbnailBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *PhotoThumbnail) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range photoThumbnailAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *PhotoThumbnail) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range photoThumbnailBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *PhotoThumbnail) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range photoThumbnailAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *PhotoThumbnail) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range photoThumbnailBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *PhotoThumbnail) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range photoThumbnailAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *PhotoThumbnail) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range photoThumbnailBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *PhotoThumbnail) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range photoThumbnailAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPhotoThumbnailHook registers your hook function for all future operations.
func AddPhotoThumbnailHook(hookPoint boil.HookPoint, photoThumbnailHook PhotoThumbnailHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		photoThumbnailAfterSelectMu.Lock()
		photoThumbnailAfterSelectHooks = append(photoThumbnailAfterSelectHooks, photoThumbnailHook)
		photoThumbnailAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		photoThumbnailBeforeInsertMu.Lock()
		photoThumbnailBeforeInsertHooks = append(photoThumbnailBeforeInsertHooks, photoThumbnailHook)
		photoThumbnailBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		photoThumbnailAfterInsertMu.Lock()
		photoThumbnailAfterInsertHooks = append(photoThumbnailAfterInsertHooks, photoThumbnailHook)
		photoThumbnailAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		photoThumbnailBeforeUpdateMu.Lock()
		photoThumbnailBeforeUpdateHooks = append(photoThumbnailBeforeUpdateHooks, photoThumbnailHook)
		photoThumbnailBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		photoThumbnailAfterUpdateMu.Lock()
		photoThumbnailAfterUpdateHooks = append(photoThumbnailAfterUpdateHooks, photoThumbnailHook)
		photoThumbnailAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		photoThumbnailBeforeDeleteMu.Lock()
		photoThumbnailBeforeDeleteHooks = append(photoThumbnailBeforeDeleteHooks, photoThumbnailHook)
		photoThumbnailBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		photoThumbnailAfterDeleteMu.Lock()
		photoThumbnailAfterDeleteHooks = append(photoThumbnailAfterDeleteHooks, photoThumbnailHook)
		photoThumbnailAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		photoThumbnailBeforeUpsertMu.Lock()
		photoThumbnailBeforeUpsertHooks = append(photoThumbnailBeforeUpsertHooks, photoThumbnailHook)
		photoThumbnailBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		photoThumbnailAfterUpsertMu.Lock()
		photoThumbnailAfterUpsertHooks = append(photoThumbnailAfterUpsertHooks, photoThumbnailHook)
		photoThumbnailAfterUpsertMu.Unlock()
	}
}

// One returns a single photoThumbnail record from the query.
func (q photoThumbnailQuery) One(ctx context.Context, exec boil.ContextExecutor) (*PhotoThumbnail, error) {
	o := &PhotoThumbnail{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodels: failed to execute a one query for photo_thumbnails")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all PhotoThumbnail records from the query.
func (q photoThumbnailQuery) All(ctx context.Context, exec boil.ContextExecutor) (PhotoThumbnailSlice, error) {
	var o []*PhotoThumbnail

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "dbmodels: failed to assign all query results to PhotoThumbnail slice")
	}

	if len(photoThumbnailAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all PhotoThumbnail records in the query.
func (q photoThumbnailQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to count photo_thumbnails rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q photoThumbnailQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "dbmodels: failed to check if photo_thumbnails exists")
	}

	return count > 0, nil
}

// Photo pointed to by the foreign key.
func (o *PhotoThumbnail) Photo(mods ...qm.QueryMod) photoQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`photo_id` = ?", o.PhotoID),
	}

	queryMods = append(queryMods, mods...)

	return Photos(queryMods...)
}

// LoadPhoto allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (photoThumbnailL) LoadPhoto(ctx context.Context, e boil.ContextExecutor, singular bool, maybePhotoThumbnail interface{}, mods queries.Applicator) error {
	var slice []*PhotoThumbnail
	var object *PhotoThumbnail

	if singular {
		var ok bool
		object, ok = maybePhotoThumbnail.(*PhotoThumbnail)
		if !ok {
			object = new(PhotoThumbnail)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePhotoThumbnail)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePhotoThumbnail))
			}
		}
	} else {
		s, ok := maybePhotoThumbnail.(*[]*PhotoThumbnail)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePhotoThumbnail)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePhotoThumbnail))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &photoThumbnailR{}
		}
		args[object.PhotoID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &photoThumbnailR{}
			}

			args[obj.PhotoID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`photos`),
		qm.WhereIn(`photos.photo_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Photo")
	}

	var resultSlice []*Photo
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Photo")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for photos")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for photos")
	}

	if len(photoAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Photo = foreign
		if foreign.R == nil {
			foreign.R = &photoR{}
		}
		foreign.R.PhotoThumbnails = append(foreign.R.PhotoThumbnails, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PhotoID == foreign.PhotoID {
				local.R.Photo = foreign
				if foreign.R == nil {
					foreign.R = &photoR{}
				}
				foreign.R.PhotoThumbnails = append(foreign.R.PhotoThumbnails, local)
				break
			}
		}
	}

	return nil
}

// SetPhoto of the photoThumbnail to the related item.
// Sets o.R.Photo to related.
// Adds o to related.R.PhotoThumbnails.
func (o *PhotoThumbnail) SetPhoto(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Photo) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `photo_thumbnails` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"photo_id"}),
		strmangle.WhereClause("`", "`", 0, photoThumbnailPrimaryKeyColumns),
	)
	values := []interface{}{related.PhotoID, o.PhotoID, o.ThumbnailName}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PhotoID = related.PhotoID
	if o.R == nil {
		o.R = &photoThumbnailR{
			Photo: related,
		}
	} else {
		o.R.Photo = related
	}

	if related.R == nil {
		related.R = &photoR{
			PhotoThumbnails: PhotoThumbnailSlice{o},
		}
	} else {
		related.R.PhotoThumbnails = append(related.R.PhotoThumbnails, o)
	}

	return nil
}

// PhotoThumbnails retrieves all the records using an executor.
func PhotoThumbnails(mods ...qm.QueryMod) photoThumbnailQuery {
	mods = append(mods, qm.From("`photo_thumbnails`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`photo_thumbnails`.*"})
	}

	return photoThumbnailQuery{q}
}

// FindPhotoThumbnail retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPhotoThumbnail(ctx context.Context, exec boil.ContextExecutor, photoID int, thumbnailName string, selectCols ...string) (*PhotoThumbnail, error) {
	photoThumbnailObj := &PhotoThumbnail{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `photo_thumbnails` where `photo_id`=? AND `thumbnail_name`=?", sel,
	)

	q := queries.Raw(query, photoID, thumbnailName)

	err := q.Bind(ctx, exec, photoThumbnailObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodels: unable to select from photo_thumbnails")
	}

	if err = photoThumbnailObj.doAfterSelectHooks(ctx, exec); err != nil {
		return photoThumbnailObj, err
	}

	return photoThumbnailObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *PhotoThumbnail) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("dbmodels: no photo_thumbnails provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(photoThumbnailColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	photoThumbnailInsertCacheMut.RLock()
	cache, cached := photoThumbnailInsertCache[key]
	photoThumbnailInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			photoThumbnailAllColumns,
			photoThumbnailColumnsWithDefault,
			photoThumbnailColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(photoThumbnailType, photoThumbnailMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(photoThumbnailType, photoThumbnailMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `photo_thumbnails` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `photo_thumbnails` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `photo_thumbnails` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, photoThumbnailPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to insert into photo_thumbnails")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.PhotoID,
		o.ThumbnailName,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to populate default values for photo_thumbnails")
	}

CacheNoHooks:
	if !cached {
		photoThumbnailInsertCacheMut.Lock()
		photoThumbnailInsertCache[key] = cache
		photoThumbnailInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the PhotoThumbnail.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *PhotoThumbnail) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	photoThumbnailUpdateCacheMut.RLock()
	cache, cached := photoThumbnailUpdateCache[key]
	photoThumbnailUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			photoThumbnailAllColumns,
			photoThumbnailPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("dbmodels: unable to update photo_thumbnails, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `photo_thumbnails` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, photoThumbnailPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(photoThumbnailType, photoThumbnailMapping, append(wl, photoThumbnailPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update photo_thumbnails row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by update for photo_thumbnails")
	}

	if !cached {
		photoThumbnailUpdateCacheMut.Lock()
		photoThumbnailUpdateCache[key] = cache
		photoThumbnailUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q photoThumbnailQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update all for photo_thumbnails")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to retrieve rows affected for photo_thumbnails")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PhotoThumbnailSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("dbmodels: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), photoThumbnailPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `photo_thumbnails` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, photoThumbnailPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update all in photoThumbnail slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to retrieve rows affected all in update all photoThumbnail")
	}
	return rowsAff, nil
}

var mySQLPhotoThumbnailUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *PhotoThumbnail) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("dbmodels: no photo_thumbnails provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(photoThumbnailColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLPhotoThumbnailUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	photoThumbnailUpsertCacheMut.RLock()
	cache, cached := photoThumbnailUpsertCache[key]
	photoThumbnailUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			photoThumbnailAllColumns,
			photoThumbnailColumnsWithDefault,
			photoThumbnailColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			photoThumbnailAllColumns,
			photoThumbnailPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("dbmodels: unable to upsert photo_thumbnails, could not build update column list")
		}

		ret := strmangle.SetComplement(photoThumbnailAllColumns, strmangle.SetIntersect(insert, update))

		cache.query = buildUpsertQueryMySQL(dialect, "`photo_thumbnails`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `photo_thumbnails` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(photoThumbnailType, photoThumbnailMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(photoThumbnailType, photoThumbnailMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to upsert for photo_thumbnails")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(photoThumbnailType, photoThumbnailMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to retrieve unique values for photo_thumbnails")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to populate default values for photo_thumbnails")
	}

CacheNoHooks:
	if !cached {
		photoThumbnailUpsertCacheMut.Lock()
		photoThumbnailUpsertCache[key] = cache
		photoThumbnailUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single PhotoThumbnail record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *PhotoThumbnail) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("dbmodels: no PhotoThumbnail provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), photoThumbnailPrimaryKeyMapping)
	sql := "DELETE FROM `photo_thumbnails` WHERE `photo_id`=? AND `thumbnail_name`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete from photo_thumbnails")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by delete for photo_thumbnails")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q photoThumbnailQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("dbmodels: no photoThumbnailQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete all from photo_thumbnails")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by deleteall for photo_thumbnails")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PhotoThumbnailSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(photoThumbnailBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), photoThumbnailPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `photo_thumbnails` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, photoThumbnailPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete all from photoThumbnail slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by deleteall for photo_thumbnails")
	}

	if len(photoThumbnailAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *PhotoThumbnail) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPhotoThumbnail(ctx, exec, o.PhotoID, o.ThumbnailName)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PhotoThumbnailSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PhotoThumbnailSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), photoThumbnailPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `photo_thumbnails`.* FROM `photo_thumbnails` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, photoThumbnailPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to reload all in PhotoThumbnailSlice")
	}

	*o = slice

	return nil
}

// PhotoThumbnailExists checks if the PhotoThumbnail row exists.
func PhotoThumbnailExists(ctx context.Context, exec boil.ContextExecutor, photoID int, thumbnailName string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `photo_thumbnails` where `photo_id`=? AND `thumbnail_name`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, photoID, thumbnailName)
	}
	row := exec.QueryRowContext(ctx, sql, photoID, thumbnailName)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "dbmodels: unable to check if photo_thumbnails exists")
	}

	return exists, nil
}

// Exists checks if the PhotoThumbnail row exists.
func (o *PhotoThumbnail) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return PhotoThumbnailExists(ctx, exec, o.PhotoID, o.ThumbnailName)
}
