// Code generated by MockGen. DO NOT EDIT.
// Source: infrastructures/repositories/photo_file_repository.go

// Package mock_repositories is a generated GoMock package.
package mock_repositories

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	dbmodels "github.com/hiroyky/famiphoto/infrastructures/dbmodels"
)

// MockPhotoFileRepository is a mock of PhotoFileRepository interface.
type MockPhotoFileRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPhotoFileRepositoryMockRecorder
}

// MockPhotoFileRepositoryMockRecorder is the mock recorder for MockPhotoFileRepository.
type MockPhotoFileRepositoryMockRecorder struct {
	mock *MockPhotoFileRepository
}

// NewMockPhotoFileRepository creates a new mock instance.
func NewMockPhotoFileRepository(ctrl *gomock.Controller) *MockPhotoFileRepository {
	mock := &MockPhotoFileRepository{ctrl: ctrl}
	mock.recorder = &MockPhotoFileRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPhotoFileRepository) EXPECT() *MockPhotoFileRepositoryMockRecorder {
	return m.recorder
}

// ExistPhotoFileByFilePath mocks base method.
func (m *MockPhotoFileRepository) ExistPhotoFileByFilePath(ctx context.Context, filePath string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExistPhotoFileByFilePath", ctx, filePath)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExistPhotoFileByFilePath indicates an expected call of ExistPhotoFileByFilePath.
func (mr *MockPhotoFileRepositoryMockRecorder) ExistPhotoFileByFilePath(ctx, filePath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExistPhotoFileByFilePath", reflect.TypeOf((*MockPhotoFileRepository)(nil).ExistPhotoFileByFilePath), ctx, filePath)
}

// GetPhotoFileByFilePath mocks base method.
func (m *MockPhotoFileRepository) GetPhotoFileByFilePath(ctx context.Context, filePath string) (*dbmodels.PhotoFile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPhotoFileByFilePath", ctx, filePath)
	ret0, _ := ret[0].(*dbmodels.PhotoFile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPhotoFileByFilePath indicates an expected call of GetPhotoFileByFilePath.
func (mr *MockPhotoFileRepositoryMockRecorder) GetPhotoFileByFilePath(ctx, filePath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPhotoFileByFilePath", reflect.TypeOf((*MockPhotoFileRepository)(nil).GetPhotoFileByFilePath), ctx, filePath)
}

// GetPhotoFileByPhotoFileID mocks base method.
func (m *MockPhotoFileRepository) GetPhotoFileByPhotoFileID(ctx context.Context, photoFileID int) (*dbmodels.PhotoFile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPhotoFileByPhotoFileID", ctx, photoFileID)
	ret0, _ := ret[0].(*dbmodels.PhotoFile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPhotoFileByPhotoFileID indicates an expected call of GetPhotoFileByPhotoFileID.
func (mr *MockPhotoFileRepositoryMockRecorder) GetPhotoFileByPhotoFileID(ctx, photoFileID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPhotoFileByPhotoFileID", reflect.TypeOf((*MockPhotoFileRepository)(nil).GetPhotoFileByPhotoFileID), ctx, photoFileID)
}

// GetPhotoFilesByPhotoID mocks base method.
func (m *MockPhotoFileRepository) GetPhotoFilesByPhotoID(ctx context.Context, photoID int) ([]*dbmodels.PhotoFile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPhotoFilesByPhotoID", ctx, photoID)
	ret0, _ := ret[0].([]*dbmodels.PhotoFile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPhotoFilesByPhotoID indicates an expected call of GetPhotoFilesByPhotoID.
func (mr *MockPhotoFileRepositoryMockRecorder) GetPhotoFilesByPhotoID(ctx, photoID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPhotoFilesByPhotoID", reflect.TypeOf((*MockPhotoFileRepository)(nil).GetPhotoFilesByPhotoID), ctx, photoID)
}

// GetPhotoFilesByPhotoIDs mocks base method.
func (m *MockPhotoFileRepository) GetPhotoFilesByPhotoIDs(ctx context.Context, photoIDs []int) ([]*dbmodels.PhotoFile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPhotoFilesByPhotoIDs", ctx, photoIDs)
	ret0, _ := ret[0].([]*dbmodels.PhotoFile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPhotoFilesByPhotoIDs indicates an expected call of GetPhotoFilesByPhotoIDs.
func (mr *MockPhotoFileRepositoryMockRecorder) GetPhotoFilesByPhotoIDs(ctx, photoIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPhotoFilesByPhotoIDs", reflect.TypeOf((*MockPhotoFileRepository)(nil).GetPhotoFilesByPhotoIDs), ctx, photoIDs)
}

// InsertPhotoFile mocks base method.
func (m *MockPhotoFileRepository) InsertPhotoFile(ctx context.Context, photoFile *dbmodels.PhotoFile) (*dbmodels.PhotoFile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertPhotoFile", ctx, photoFile)
	ret0, _ := ret[0].(*dbmodels.PhotoFile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertPhotoFile indicates an expected call of InsertPhotoFile.
func (mr *MockPhotoFileRepositoryMockRecorder) InsertPhotoFile(ctx, photoFile interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertPhotoFile", reflect.TypeOf((*MockPhotoFileRepository)(nil).InsertPhotoFile), ctx, photoFile)
}

// UpdatePhotoFile mocks base method.
func (m *MockPhotoFileRepository) UpdatePhotoFile(ctx context.Context, photoFile *dbmodels.PhotoFile) (*dbmodels.PhotoFile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePhotoFile", ctx, photoFile)
	ret0, _ := ret[0].(*dbmodels.PhotoFile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePhotoFile indicates an expected call of UpdatePhotoFile.
func (mr *MockPhotoFileRepositoryMockRecorder) UpdatePhotoFile(ctx, photoFile interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePhotoFile", reflect.TypeOf((*MockPhotoFileRepository)(nil).UpdatePhotoFile), ctx, photoFile)
}
