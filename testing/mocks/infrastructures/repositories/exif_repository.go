// Code generated by MockGen. DO NOT EDIT.
// Source: infrastructures/repositories/exif_repository.go

// Package mock_repositories is a generated GoMock package.
package mock_repositories

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	dbmodels "github.com/hiroyky/famiphoto/infrastructures/dbmodels"
)

// MockExifRepository is a mock of ExifRepository interface.
type MockExifRepository struct {
	ctrl     *gomock.Controller
	recorder *MockExifRepositoryMockRecorder
}

// MockExifRepositoryMockRecorder is the mock recorder for MockExifRepository.
type MockExifRepositoryMockRecorder struct {
	mock *MockExifRepository
}

// NewMockExifRepository creates a new mock instance.
func NewMockExifRepository(ctrl *gomock.Controller) *MockExifRepository {
	mock := &MockExifRepository{ctrl: ctrl}
	mock.recorder = &MockExifRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExifRepository) EXPECT() *MockExifRepositoryMockRecorder {
	return m.recorder
}

// GetPhotoMetaItemByTagID mocks base method.
func (m *MockExifRepository) GetPhotoMetaItemByTagID(ctx context.Context, photoID, tagID int64) (*dbmodels.Exif, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPhotoMetaItemByTagID", ctx, photoID, tagID)
	ret0, _ := ret[0].(*dbmodels.Exif)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPhotoMetaItemByTagID indicates an expected call of GetPhotoMetaItemByTagID.
func (mr *MockExifRepositoryMockRecorder) GetPhotoMetaItemByTagID(ctx, photoID, tagID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPhotoMetaItemByTagID", reflect.TypeOf((*MockExifRepository)(nil).GetPhotoMetaItemByTagID), ctx, photoID, tagID)
}

// InsertPhotoMetaItem mocks base method.
func (m *MockExifRepository) InsertPhotoMetaItem(ctx context.Context, exif *dbmodels.Exif) (*dbmodels.Exif, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertPhotoMetaItem", ctx, exif)
	ret0, _ := ret[0].(*dbmodels.Exif)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertPhotoMetaItem indicates an expected call of InsertPhotoMetaItem.
func (mr *MockExifRepositoryMockRecorder) InsertPhotoMetaItem(ctx, exif interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertPhotoMetaItem", reflect.TypeOf((*MockExifRepository)(nil).InsertPhotoMetaItem), ctx, exif)
}

// UpdatePhotoMetaItem mocks base method.
func (m *MockExifRepository) UpdatePhotoMetaItem(ctx context.Context, exif *dbmodels.Exif) (*dbmodels.Exif, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePhotoMetaItem", ctx, exif)
	ret0, _ := ret[0].(*dbmodels.Exif)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePhotoMetaItem indicates an expected call of UpdatePhotoMetaItem.
func (mr *MockExifRepositoryMockRecorder) UpdatePhotoMetaItem(ctx, exif interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePhotoMetaItem", reflect.TypeOf((*MockExifRepository)(nil).UpdatePhotoMetaItem), ctx, exif)
}
