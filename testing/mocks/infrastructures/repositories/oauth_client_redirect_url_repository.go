// Code generated by MockGen. DO NOT EDIT.
// Source: infrastructures/repositories/oauth_client_redirect_url_repository.go

// Package mock_repositories is a generated GoMock package.
package mock_repositories

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entities "github.com/hiroyky/famiphoto/entities"
	dbmodels "github.com/hiroyky/famiphoto/infrastructures/dbmodels"
)

// MockOAuthClientRedirectURLRepository is a mock of OAuthClientRedirectURLRepository interface.
type MockOAuthClientRedirectURLRepository struct {
	ctrl     *gomock.Controller
	recorder *MockOAuthClientRedirectURLRepositoryMockRecorder
}

// MockOAuthClientRedirectURLRepositoryMockRecorder is the mock recorder for MockOAuthClientRedirectURLRepository.
type MockOAuthClientRedirectURLRepositoryMockRecorder struct {
	mock *MockOAuthClientRedirectURLRepository
}

// NewMockOAuthClientRedirectURLRepository creates a new mock instance.
func NewMockOAuthClientRedirectURLRepository(ctrl *gomock.Controller) *MockOAuthClientRedirectURLRepository {
	mock := &MockOAuthClientRedirectURLRepository{ctrl: ctrl}
	mock.recorder = &MockOAuthClientRedirectURLRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOAuthClientRedirectURLRepository) EXPECT() *MockOAuthClientRedirectURLRepositoryMockRecorder {
	return m.recorder
}

// CreateOAuthClientRedirectURL mocks base method.
func (m *MockOAuthClientRedirectURLRepository) CreateOAuthClientRedirectURL(ctx context.Context, url *entities.OAuthClientRedirectURL) (*dbmodels.OauthClientRedirectURL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOAuthClientRedirectURL", ctx, url)
	ret0, _ := ret[0].(*dbmodels.OauthClientRedirectURL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOAuthClientRedirectURL indicates an expected call of CreateOAuthClientRedirectURL.
func (mr *MockOAuthClientRedirectURLRepositoryMockRecorder) CreateOAuthClientRedirectURL(ctx, url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOAuthClientRedirectURL", reflect.TypeOf((*MockOAuthClientRedirectURLRepository)(nil).CreateOAuthClientRedirectURL), ctx, url)
}

// GetOAuthClientRedirectURLsByOAuthClientID mocks base method.
func (m *MockOAuthClientRedirectURLRepository) GetOAuthClientRedirectURLsByOAuthClientID(ctx context.Context, oauthClientID string) ([]*dbmodels.OauthClientRedirectURL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOAuthClientRedirectURLsByOAuthClientID", ctx, oauthClientID)
	ret0, _ := ret[0].([]*dbmodels.OauthClientRedirectURL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOAuthClientRedirectURLsByOAuthClientID indicates an expected call of GetOAuthClientRedirectURLsByOAuthClientID.
func (mr *MockOAuthClientRedirectURLRepositoryMockRecorder) GetOAuthClientRedirectURLsByOAuthClientID(ctx, oauthClientID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOAuthClientRedirectURLsByOAuthClientID", reflect.TypeOf((*MockOAuthClientRedirectURLRepository)(nil).GetOAuthClientRedirectURLsByOAuthClientID), ctx, oauthClientID)
}
