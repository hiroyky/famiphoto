// Code generated by MockGen. DO NOT EDIT.
// Source: infrastructures/repositories/elasticsearch_repository.go

// Package mock_repositories is a generated GoMock package.
package mock_repositories

import (
	context "context"
	reflect "reflect"

	esutil "github.com/elastic/go-elasticsearch/v8/esutil"
	gomock "github.com/golang/mock/gomock"
	filters "github.com/hiroyky/famiphoto/infrastructures/filters"
	models "github.com/hiroyky/famiphoto/infrastructures/models"
)

// MockElasticSearchRepository is a mock of ElasticSearchRepository interface.
type MockElasticSearchRepository struct {
	ctrl     *gomock.Controller
	recorder *MockElasticSearchRepositoryMockRecorder
}

// MockElasticSearchRepositoryMockRecorder is the mock recorder for MockElasticSearchRepository.
type MockElasticSearchRepositoryMockRecorder struct {
	mock *MockElasticSearchRepository
}

// NewMockElasticSearchRepository creates a new mock instance.
func NewMockElasticSearchRepository(ctrl *gomock.Controller) *MockElasticSearchRepository {
	mock := &MockElasticSearchRepository{ctrl: ctrl}
	mock.recorder = &MockElasticSearchRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockElasticSearchRepository) EXPECT() *MockElasticSearchRepositoryMockRecorder {
	return m.recorder
}

// BulkInsertPhotos mocks base method.
func (m *MockElasticSearchRepository) BulkInsertPhotos(ctx context.Context, photos []*models.PhotoIndex) (*esutil.BulkIndexerStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BulkInsertPhotos", ctx, photos)
	ret0, _ := ret[0].(*esutil.BulkIndexerStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BulkInsertPhotos indicates an expected call of BulkInsertPhotos.
func (mr *MockElasticSearchRepositoryMockRecorder) BulkInsertPhotos(ctx, photos interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkInsertPhotos", reflect.TypeOf((*MockElasticSearchRepository)(nil).BulkInsertPhotos), ctx, photos)
}

// SearchPhotos mocks base method.
func (m *MockElasticSearchRepository) SearchPhotos(ctx context.Context, query *filters.PhotoSearchQuery) (*models.PhotoResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchPhotos", ctx, query)
	ret0, _ := ret[0].(*models.PhotoResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchPhotos indicates an expected call of SearchPhotos.
func (mr *MockElasticSearchRepositoryMockRecorder) SearchPhotos(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchPhotos", reflect.TypeOf((*MockElasticSearchRepository)(nil).SearchPhotos), ctx, query)
}
