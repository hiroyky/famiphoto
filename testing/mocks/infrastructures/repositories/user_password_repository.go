// Code generated by MockGen. DO NOT EDIT.
// Source: infrastructures/repositories/user_password_repository.go

// Package mock_repositories is a generated GoMock package.
package mock_repositories

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	dbmodels "github.com/hiroyky/famiphoto/infrastructures/dbmodels"
)

// MockUserPasswordRepository is a mock of UserPasswordRepository interface.
type MockUserPasswordRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserPasswordRepositoryMockRecorder
}

// MockUserPasswordRepositoryMockRecorder is the mock recorder for MockUserPasswordRepository.
type MockUserPasswordRepositoryMockRecorder struct {
	mock *MockUserPasswordRepository
}

// NewMockUserPasswordRepository creates a new mock instance.
func NewMockUserPasswordRepository(ctrl *gomock.Controller) *MockUserPasswordRepository {
	mock := &MockUserPasswordRepository{ctrl: ctrl}
	mock.recorder = &MockUserPasswordRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserPasswordRepository) EXPECT() *MockUserPasswordRepositoryMockRecorder {
	return m.recorder
}

// GetUserPassword mocks base method.
func (m *MockUserPasswordRepository) GetUserPassword(ctx context.Context, userID string) (*dbmodels.UserPassword, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserPassword", ctx, userID)
	ret0, _ := ret[0].(*dbmodels.UserPassword)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserPassword indicates an expected call of GetUserPassword.
func (mr *MockUserPasswordRepositoryMockRecorder) GetUserPassword(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserPassword", reflect.TypeOf((*MockUserPasswordRepository)(nil).GetUserPassword), ctx, userID)
}
