// Code generated by MockGen. DO NOT EDIT.
// Source: infrastructures/group_adapter.go

// Package mock_infrastructures is a generated GoMock package.
package mock_infrastructures

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entities "github.com/hiroyky/famiphoto/entities"
)

// MockGroupAdapter is a mock of GroupAdapter interface.
type MockGroupAdapter struct {
	ctrl     *gomock.Controller
	recorder *MockGroupAdapterMockRecorder
}

// MockGroupAdapterMockRecorder is the mock recorder for MockGroupAdapter.
type MockGroupAdapterMockRecorder struct {
	mock *MockGroupAdapter
}

// NewMockGroupAdapter creates a new mock instance.
func NewMockGroupAdapter(ctrl *gomock.Controller) *MockGroupAdapter {
	mock := &MockGroupAdapter{ctrl: ctrl}
	mock.recorder = &MockGroupAdapterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGroupAdapter) EXPECT() *MockGroupAdapterMockRecorder {
	return m.recorder
}

// GetGroup mocks base method.
func (m *MockGroupAdapter) GetGroup(ctx context.Context, groupID string) (*entities.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroup", ctx, groupID)
	ret0, _ := ret[0].(*entities.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroup indicates an expected call of GetGroup.
func (mr *MockGroupAdapterMockRecorder) GetGroup(ctx, groupID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroup", reflect.TypeOf((*MockGroupAdapter)(nil).GetGroup), ctx, groupID)
}

// GetGroupsByUserID mocks base method.
func (m *MockGroupAdapter) GetGroupsByUserID(ctx context.Context, userID string) ([]*entities.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroupsByUserID", ctx, userID)
	ret0, _ := ret[0].([]*entities.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroupsByUserID indicates an expected call of GetGroupsByUserID.
func (mr *MockGroupAdapterMockRecorder) GetGroupsByUserID(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupsByUserID", reflect.TypeOf((*MockGroupAdapter)(nil).GetGroupsByUserID), ctx, userID)
}
