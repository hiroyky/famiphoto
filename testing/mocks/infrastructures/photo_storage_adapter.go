// Code generated by MockGen. DO NOT EDIT.
// Source: infrastructures/photo_storage_adapter.go

// Package mock_infrastructures is a generated GoMock package.
package mock_infrastructures

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	entities "github.com/hiroyky/famiphoto/entities"
)

// MockPhotoStorageAdapter is a mock of PhotoStorageAdapter interface.
type MockPhotoStorageAdapter struct {
	ctrl     *gomock.Controller
	recorder *MockPhotoStorageAdapterMockRecorder
}

// MockPhotoStorageAdapterMockRecorder is the mock recorder for MockPhotoStorageAdapter.
type MockPhotoStorageAdapterMockRecorder struct {
	mock *MockPhotoStorageAdapter
}

// NewMockPhotoStorageAdapter creates a new mock instance.
func NewMockPhotoStorageAdapter(ctrl *gomock.Controller) *MockPhotoStorageAdapter {
	mock := &MockPhotoStorageAdapter{ctrl: ctrl}
	mock.recorder = &MockPhotoStorageAdapterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPhotoStorageAdapter) EXPECT() *MockPhotoStorageAdapterMockRecorder {
	return m.recorder
}

// FindDirContents mocks base method.
func (m *MockPhotoStorageAdapter) FindDirContents(dirPath string) ([]*entities.StorageFileInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindDirContents", dirPath)
	ret0, _ := ret[0].([]*entities.StorageFileInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindDirContents indicates an expected call of FindDirContents.
func (mr *MockPhotoStorageAdapterMockRecorder) FindDirContents(dirPath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindDirContents", reflect.TypeOf((*MockPhotoStorageAdapter)(nil).FindDirContents), dirPath)
}

// GenerateSignToSavePhoto mocks base method.
func (m *MockPhotoStorageAdapter) GenerateSignToSavePhoto(ctx context.Context, userID, groupID string, expireIn int64) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateSignToSavePhoto", ctx, userID, groupID, expireIn)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateSignToSavePhoto indicates an expected call of GenerateSignToSavePhoto.
func (mr *MockPhotoStorageAdapterMockRecorder) GenerateSignToSavePhoto(ctx, userID, groupID, expireIn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateSignToSavePhoto", reflect.TypeOf((*MockPhotoStorageAdapter)(nil).GenerateSignToSavePhoto), ctx, userID, groupID, expireIn)
}

// LoadContent mocks base method.
func (m *MockPhotoStorageAdapter) LoadContent(path string) (entities.StorageFileData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadContent", path)
	ret0, _ := ret[0].(entities.StorageFileData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadContent indicates an expected call of LoadContent.
func (mr *MockPhotoStorageAdapterMockRecorder) LoadContent(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadContent", reflect.TypeOf((*MockPhotoStorageAdapter)(nil).LoadContent), path)
}

// ParsePhotoMeta mocks base method.
func (m *MockPhotoStorageAdapter) ParsePhotoMeta(path string) (entities.PhotoMeta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParsePhotoMeta", path)
	ret0, _ := ret[0].(entities.PhotoMeta)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParsePhotoMeta indicates an expected call of ParsePhotoMeta.
func (mr *MockPhotoStorageAdapterMockRecorder) ParsePhotoMeta(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParsePhotoMeta", reflect.TypeOf((*MockPhotoStorageAdapter)(nil).ParsePhotoMeta), path)
}

// SavePhotoFile mocks base method.
func (m *MockPhotoStorageAdapter) SavePhotoFile(ctx context.Context, userID, groupID, fileName string, dateTimeOriginal time.Time, data []byte) (*entities.StorageFileInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SavePhotoFile", ctx, userID, groupID, fileName, dateTimeOriginal, data)
	ret0, _ := ret[0].(*entities.StorageFileInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SavePhotoFile indicates an expected call of SavePhotoFile.
func (mr *MockPhotoStorageAdapterMockRecorder) SavePhotoFile(ctx, userID, groupID, fileName, dateTimeOriginal, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SavePhotoFile", reflect.TypeOf((*MockPhotoStorageAdapter)(nil).SavePhotoFile), ctx, userID, groupID, fileName, dateTimeOriginal, data)
}

// SavePreview mocks base method.
func (m *MockPhotoStorageAdapter) SavePreview(ctx context.Context, photoID int, data []byte, groupID, ownerID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SavePreview", ctx, photoID, data, groupID, ownerID)
	ret0, _ := ret[0].(error)
	return ret0
}

// SavePreview indicates an expected call of SavePreview.
func (mr *MockPhotoStorageAdapterMockRecorder) SavePreview(ctx, photoID, data, groupID, ownerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SavePreview", reflect.TypeOf((*MockPhotoStorageAdapter)(nil).SavePreview), ctx, photoID, data, groupID, ownerID)
}

// SaveThumbnail mocks base method.
func (m *MockPhotoStorageAdapter) SaveThumbnail(ctx context.Context, photoID int, data []byte, groupID, ownerID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveThumbnail", ctx, photoID, data, groupID, ownerID)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveThumbnail indicates an expected call of SaveThumbnail.
func (mr *MockPhotoStorageAdapterMockRecorder) SaveThumbnail(ctx, photoID, data, groupID, ownerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveThumbnail", reflect.TypeOf((*MockPhotoStorageAdapter)(nil).SaveThumbnail), ctx, photoID, data, groupID, ownerID)
}

// VerifySignToken mocks base method.
func (m *MockPhotoStorageAdapter) VerifySignToken(ctx context.Context, token string) (*entities.PhotoUploadInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifySignToken", ctx, token)
	ret0, _ := ret[0].(*entities.PhotoUploadInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifySignToken indicates an expected call of VerifySignToken.
func (mr *MockPhotoStorageAdapterMockRecorder) VerifySignToken(ctx, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifySignToken", reflect.TypeOf((*MockPhotoStorageAdapter)(nil).VerifySignToken), ctx, token)
}
