// Code generated by MockGen. DO NOT EDIT.
// Source: infrastructures/auth_adapter.go

// Package mock_infrastructures is a generated GoMock package.
package mock_infrastructures

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entities "github.com/hiroyky/famiphoto/entities"
)

// MockAuthAdapter is a mock of AuthAdapter interface.
type MockAuthAdapter struct {
	ctrl     *gomock.Controller
	recorder *MockAuthAdapterMockRecorder
}

// MockAuthAdapterMockRecorder is the mock recorder for MockAuthAdapter.
type MockAuthAdapterMockRecorder struct {
	mock *MockAuthAdapter
}

// NewMockAuthAdapter creates a new mock instance.
func NewMockAuthAdapter(ctrl *gomock.Controller) *MockAuthAdapter {
	mock := &MockAuthAdapter{ctrl: ctrl}
	mock.recorder = &MockAuthAdapterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthAdapter) EXPECT() *MockAuthAdapterMockRecorder {
	return m.recorder
}

// CreateOAuthClient mocks base method.
func (m *MockAuthAdapter) CreateOAuthClient(ctx context.Context, client *entities.OauthClient, clientSecret string) (*entities.OauthClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOAuthClient", ctx, client, clientSecret)
	ret0, _ := ret[0].(*entities.OauthClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOAuthClient indicates an expected call of CreateOAuthClient.
func (mr *MockAuthAdapterMockRecorder) CreateOAuthClient(ctx, client, clientSecret interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOAuthClient", reflect.TypeOf((*MockAuthAdapter)(nil).CreateOAuthClient), ctx, client, clientSecret)
}

// DeleteClientAllAuth mocks base method.
func (m *MockAuthAdapter) DeleteClientAllAuth(ctx context.Context, clientID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteClientAllAuth", ctx, clientID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteClientAllAuth indicates an expected call of DeleteClientAllAuth.
func (mr *MockAuthAdapterMockRecorder) DeleteClientAllAuth(ctx, clientID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClientAllAuth", reflect.TypeOf((*MockAuthAdapter)(nil).DeleteClientAllAuth), ctx, clientID)
}

// DeleteUserAuth mocks base method.
func (m *MockAuthAdapter) DeleteUserAuth(ctx context.Context, userID, clientID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserAuth", ctx, userID, clientID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserAuth indicates an expected call of DeleteUserAuth.
func (mr *MockAuthAdapterMockRecorder) DeleteUserAuth(ctx, userID, clientID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserAuth", reflect.TypeOf((*MockAuthAdapter)(nil).DeleteUserAuth), ctx, userID, clientID)
}

// ExistOauthClient mocks base method.
func (m *MockAuthAdapter) ExistOauthClient(ctx context.Context, id string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExistOauthClient", ctx, id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExistOauthClient indicates an expected call of ExistOauthClient.
func (mr *MockAuthAdapterMockRecorder) ExistOauthClient(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExistOauthClient", reflect.TypeOf((*MockAuthAdapter)(nil).ExistOauthClient), ctx, id)
}

// GetByOauthClientID mocks base method.
func (m *MockAuthAdapter) GetByOauthClientID(ctx context.Context, id string) (*entities.OauthClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByOauthClientID", ctx, id)
	ret0, _ := ret[0].(*entities.OauthClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByOauthClientID indicates an expected call of GetByOauthClientID.
func (mr *MockAuthAdapterMockRecorder) GetByOauthClientID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByOauthClientID", reflect.TypeOf((*MockAuthAdapter)(nil).GetByOauthClientID), ctx, id)
}

// GetCode mocks base method.
func (m *MockAuthAdapter) GetCode(ctx context.Context, code string) (*entities.OAuthCode, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCode", ctx, code)
	ret0, _ := ret[0].(*entities.OAuthCode)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCode indicates an expected call of GetCode.
func (mr *MockAuthAdapterMockRecorder) GetCode(ctx, code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCode", reflect.TypeOf((*MockAuthAdapter)(nil).GetCode), ctx, code)
}

// GetOAuthClientRedirectURLsByOAuthClientID mocks base method.
func (m *MockAuthAdapter) GetOAuthClientRedirectURLsByOAuthClientID(ctx context.Context, oauthClientID string) (entities.OAuthClientRedirectURLList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOAuthClientRedirectURLsByOAuthClientID", ctx, oauthClientID)
	ret0, _ := ret[0].(entities.OAuthClientRedirectURLList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOAuthClientRedirectURLsByOAuthClientID indicates an expected call of GetOAuthClientRedirectURLsByOAuthClientID.
func (mr *MockAuthAdapterMockRecorder) GetOAuthClientRedirectURLsByOAuthClientID(ctx, oauthClientID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOAuthClientRedirectURLsByOAuthClientID", reflect.TypeOf((*MockAuthAdapter)(nil).GetOAuthClientRedirectURLsByOAuthClientID), ctx, oauthClientID)
}

// GetSession mocks base method.
func (m *MockAuthAdapter) GetSession(ctx context.Context, accessToken string) (*entities.OauthSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSession", ctx, accessToken)
	ret0, _ := ret[0].(*entities.OauthSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSession indicates an expected call of GetSession.
func (mr *MockAuthAdapterMockRecorder) GetSession(ctx, accessToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSession", reflect.TypeOf((*MockAuthAdapter)(nil).GetSession), ctx, accessToken)
}

// GetUserAuth mocks base method.
func (m *MockAuthAdapter) GetUserAuth(ctx context.Context, userID, clientID string) (*entities.UserAuth, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserAuth", ctx, userID, clientID)
	ret0, _ := ret[0].(*entities.UserAuth)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserAuth indicates an expected call of GetUserAuth.
func (mr *MockAuthAdapterMockRecorder) GetUserAuth(ctx, userID, clientID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserAuth", reflect.TypeOf((*MockAuthAdapter)(nil).GetUserAuth), ctx, userID, clientID)
}

// GetUserAuthByRefreshToken mocks base method.
func (m *MockAuthAdapter) GetUserAuthByRefreshToken(ctx context.Context, refreshToken string) (*entities.UserAuth, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserAuthByRefreshToken", ctx, refreshToken)
	ret0, _ := ret[0].(*entities.UserAuth)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserAuthByRefreshToken indicates an expected call of GetUserAuthByRefreshToken.
func (mr *MockAuthAdapterMockRecorder) GetUserAuthByRefreshToken(ctx, refreshToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserAuthByRefreshToken", reflect.TypeOf((*MockAuthAdapter)(nil).GetUserAuthByRefreshToken), ctx, refreshToken)
}

// SetClientCredentialAccessToken mocks base method.
func (m *MockAuthAdapter) SetClientCredentialAccessToken(ctx context.Context, clientID, accessToken string, expireAt int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetClientCredentialAccessToken", ctx, clientID, accessToken, expireAt)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetClientCredentialAccessToken indicates an expected call of SetClientCredentialAccessToken.
func (mr *MockAuthAdapterMockRecorder) SetClientCredentialAccessToken(ctx, clientID, accessToken, expireAt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetClientCredentialAccessToken", reflect.TypeOf((*MockAuthAdapter)(nil).SetClientCredentialAccessToken), ctx, clientID, accessToken, expireAt)
}

// SetCode mocks base method.
func (m *MockAuthAdapter) SetCode(ctx context.Context, code *entities.OAuthCode) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetCode", ctx, code)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetCode indicates an expected call of SetCode.
func (mr *MockAuthAdapterMockRecorder) SetCode(ctx, code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCode", reflect.TypeOf((*MockAuthAdapter)(nil).SetCode), ctx, code)
}

// SetUserAccessToken mocks base method.
func (m *MockAuthAdapter) SetUserAccessToken(ctx context.Context, clientID, userID, accessToken string, scope entities.OauthScope, expireIn int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetUserAccessToken", ctx, clientID, userID, accessToken, scope, expireIn)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetUserAccessToken indicates an expected call of SetUserAccessToken.
func (mr *MockAuthAdapterMockRecorder) SetUserAccessToken(ctx, clientID, userID, accessToken, scope, expireIn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUserAccessToken", reflect.TypeOf((*MockAuthAdapter)(nil).SetUserAccessToken), ctx, clientID, userID, accessToken, scope, expireIn)
}

// UpsertUserAuth mocks base method.
func (m *MockAuthAdapter) UpsertUserAuth(ctx context.Context, userAuth *entities.UserAuth) (*entities.UserAuth, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertUserAuth", ctx, userAuth)
	ret0, _ := ret[0].(*entities.UserAuth)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertUserAuth indicates an expected call of UpsertUserAuth.
func (mr *MockAuthAdapterMockRecorder) UpsertUserAuth(ctx, userAuth interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertUserAuth", reflect.TypeOf((*MockAuthAdapter)(nil).UpsertUserAuth), ctx, userAuth)
}
