// Code generated by MockGen. DO NOT EDIT.
// Source: usecases/download_usecase.go

// Package mock_usecases is a generated GoMock package.
package mock_usecases

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entities "github.com/hiroyky/famiphoto/entities"
)

// MockDownloadUseCase is a mock of DownloadUseCase interface.
type MockDownloadUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockDownloadUseCaseMockRecorder
}

// MockDownloadUseCaseMockRecorder is the mock recorder for MockDownloadUseCase.
type MockDownloadUseCaseMockRecorder struct {
	mock *MockDownloadUseCase
}

// NewMockDownloadUseCase creates a new mock instance.
func NewMockDownloadUseCase(ctrl *gomock.Controller) *MockDownloadUseCase {
	mock := &MockDownloadUseCase{ctrl: ctrl}
	mock.recorder = &MockDownloadUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDownloadUseCase) EXPECT() *MockDownloadUseCaseMockRecorder {
	return m.recorder
}

// LoadPhotoFile mocks base method.
func (m *MockDownloadUseCase) LoadPhotoFile(ctx context.Context, fileID int) (entities.StorageFileData, *entities.PhotoFile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadPhotoFile", ctx, fileID)
	ret0, _ := ret[0].(entities.StorageFileData)
	ret1, _ := ret[1].(*entities.PhotoFile)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// LoadPhotoFile indicates an expected call of LoadPhotoFile.
func (mr *MockDownloadUseCaseMockRecorder) LoadPhotoFile(ctx, fileID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadPhotoFile", reflect.TypeOf((*MockDownloadUseCase)(nil).LoadPhotoFile), ctx, fileID)
}

// VerifyDownloadPermission mocks base method.
func (m *MockDownloadUseCase) VerifyDownloadPermission(ctx context.Context, fileID int, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyDownloadPermission", ctx, fileID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifyDownloadPermission indicates an expected call of VerifyDownloadPermission.
func (mr *MockDownloadUseCaseMockRecorder) VerifyDownloadPermission(ctx, fileID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyDownloadPermission", reflect.TypeOf((*MockDownloadUseCase)(nil).VerifyDownloadPermission), ctx, fileID, userID)
}
