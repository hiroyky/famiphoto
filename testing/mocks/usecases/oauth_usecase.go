// Code generated by MockGen. DO NOT EDIT.
// Source: usecases/oauth_usecase.go

// Package mock_usecases is a generated GoMock package.
package mock_usecases

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	entities "github.com/hiroyky/famiphoto/entities"
)

// MockOauthUseCase is a mock of OauthUseCase interface.
type MockOauthUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockOauthUseCaseMockRecorder
}

// MockOauthUseCaseMockRecorder is the mock recorder for MockOauthUseCase.
type MockOauthUseCaseMockRecorder struct {
	mock *MockOauthUseCase
}

// NewMockOauthUseCase creates a new mock instance.
func NewMockOauthUseCase(ctrl *gomock.Controller) *MockOauthUseCase {
	mock := &MockOauthUseCase{ctrl: ctrl}
	mock.recorder = &MockOauthUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOauthUseCase) EXPECT() *MockOauthUseCaseMockRecorder {
	return m.recorder
}

// AuthAccessToken mocks base method.
func (m *MockOauthUseCase) AuthAccessToken(ctx context.Context, accessToken string) (*entities.OauthSession, *entities.OauthClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthAccessToken", ctx, accessToken)
	ret0, _ := ret[0].(*entities.OauthSession)
	ret1, _ := ret[1].(*entities.OauthClient)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// AuthAccessToken indicates an expected call of AuthAccessToken.
func (mr *MockOauthUseCaseMockRecorder) AuthAccessToken(ctx, accessToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthAccessToken", reflect.TypeOf((*MockOauthUseCase)(nil).AuthAccessToken), ctx, accessToken)
}

// AuthClientSecret mocks base method.
func (m *MockOauthUseCase) AuthClientSecret(ctx context.Context, clientID, clientSecret string) (*entities.OauthClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthClientSecret", ctx, clientID, clientSecret)
	ret0, _ := ret[0].(*entities.OauthClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthClientSecret indicates an expected call of AuthClientSecret.
func (mr *MockOauthUseCaseMockRecorder) AuthClientSecret(ctx, clientID, clientSecret interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthClientSecret", reflect.TypeOf((*MockOauthUseCase)(nil).AuthClientSecret), ctx, clientID, clientSecret)
}

// Authorize mocks base method.
func (m *MockOauthUseCase) Authorize(ctx context.Context, userID, password, clientID, redirectURL string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Authorize", ctx, userID, password, clientID, redirectURL)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Authorize indicates an expected call of Authorize.
func (mr *MockOauthUseCaseMockRecorder) Authorize(ctx, userID, password, clientID, redirectURL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authorize", reflect.TypeOf((*MockOauthUseCase)(nil).Authorize), ctx, userID, password, clientID, redirectURL)
}

// CreateOauthClient mocks base method.
func (m *MockOauthUseCase) CreateOauthClient(ctx context.Context, client *entities.OauthClient) (*entities.OauthClient, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOauthClient", ctx, client)
	ret0, _ := ret[0].(*entities.OauthClient)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateOauthClient indicates an expected call of CreateOauthClient.
func (mr *MockOauthUseCaseMockRecorder) CreateOauthClient(ctx, client interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOauthClient", reflect.TypeOf((*MockOauthUseCase)(nil).CreateOauthClient), ctx, client)
}

// GetOauthClientRedirectURLs mocks base method.
func (m *MockOauthUseCase) GetOauthClientRedirectURLs(ctx context.Context, oauthClientID string) ([]*entities.OAuthClientRedirectURL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOauthClientRedirectURLs", ctx, oauthClientID)
	ret0, _ := ret[0].([]*entities.OAuthClientRedirectURL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOauthClientRedirectURLs indicates an expected call of GetOauthClientRedirectURLs.
func (mr *MockOauthUseCaseMockRecorder) GetOauthClientRedirectURLs(ctx, oauthClientID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOauthClientRedirectURLs", reflect.TypeOf((*MockOauthUseCase)(nil).GetOauthClientRedirectURLs), ctx, oauthClientID)
}

// Oauth2AuthorizationCode mocks base method.
func (m *MockOauthUseCase) Oauth2AuthorizationCode(ctx context.Context, client *entities.OauthClient, code, redirectURL string, now time.Time) (*entities.Oauth2AuthorizationCode, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Oauth2AuthorizationCode", ctx, client, code, redirectURL, now)
	ret0, _ := ret[0].(*entities.Oauth2AuthorizationCode)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Oauth2AuthorizationCode indicates an expected call of Oauth2AuthorizationCode.
func (mr *MockOauthUseCaseMockRecorder) Oauth2AuthorizationCode(ctx, client, code, redirectURL, now interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Oauth2AuthorizationCode", reflect.TypeOf((*MockOauthUseCase)(nil).Oauth2AuthorizationCode), ctx, client, code, redirectURL, now)
}

// Oauth2ClientCredential mocks base method.
func (m *MockOauthUseCase) Oauth2ClientCredential(ctx context.Context, client *entities.OauthClient) (*entities.Oauth2ClientCredential, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Oauth2ClientCredential", ctx, client)
	ret0, _ := ret[0].(*entities.Oauth2ClientCredential)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Oauth2ClientCredential indicates an expected call of Oauth2ClientCredential.
func (mr *MockOauthUseCaseMockRecorder) Oauth2ClientCredential(ctx, client interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Oauth2ClientCredential", reflect.TypeOf((*MockOauthUseCase)(nil).Oauth2ClientCredential), ctx, client)
}

// Oauth2RefreshToken mocks base method.
func (m *MockOauthUseCase) Oauth2RefreshToken(ctx context.Context, client *entities.OauthClient, refreshToken string) (*entities.Oauth2AuthorizationCode, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Oauth2RefreshToken", ctx, client, refreshToken)
	ret0, _ := ret[0].(*entities.Oauth2AuthorizationCode)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Oauth2RefreshToken indicates an expected call of Oauth2RefreshToken.
func (mr *MockOauthUseCaseMockRecorder) Oauth2RefreshToken(ctx, client, refreshToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Oauth2RefreshToken", reflect.TypeOf((*MockOauthUseCase)(nil).Oauth2RefreshToken), ctx, client, refreshToken)
}

// ValidateToAuthorizeUser mocks base method.
func (m *MockOauthUseCase) ValidateToAuthorizeUser(ctx context.Context, clientID, redirectURL string) (*entities.OauthClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateToAuthorizeUser", ctx, clientID, redirectURL)
	ret0, _ := ret[0].(*entities.OauthClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateToAuthorizeUser indicates an expected call of ValidateToAuthorizeUser.
func (mr *MockOauthUseCaseMockRecorder) ValidateToAuthorizeUser(ctx, clientID, redirectURL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateToAuthorizeUser", reflect.TypeOf((*MockOauthUseCase)(nil).ValidateToAuthorizeUser), ctx, clientID, redirectURL)
}
