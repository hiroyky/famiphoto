// Code generated by MockGen. DO NOT EDIT.
// Source: usecases/photo_import_usecase.go

// Package mock_usecases is a generated GoMock package.
package mock_usecases

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPhotoImportUseCase is a mock of PhotoImportUseCase interface.
type MockPhotoImportUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockPhotoImportUseCaseMockRecorder
}

// MockPhotoImportUseCaseMockRecorder is the mock recorder for MockPhotoImportUseCase.
type MockPhotoImportUseCaseMockRecorder struct {
	mock *MockPhotoImportUseCase
}

// NewMockPhotoImportUseCase creates a new mock instance.
func NewMockPhotoImportUseCase(ctrl *gomock.Controller) *MockPhotoImportUseCase {
	mock := &MockPhotoImportUseCase{ctrl: ctrl}
	mock.recorder = &MockPhotoImportUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPhotoImportUseCase) EXPECT() *MockPhotoImportUseCaseMockRecorder {
	return m.recorder
}

// IndexingPhotos mocks base method.
func (m *MockPhotoImportUseCase) IndexingPhotos(ctx context.Context, rootPath, groupID, userID string, extensions []string, fast bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IndexingPhotos", ctx, rootPath, groupID, userID, extensions, fast)
	ret0, _ := ret[0].(error)
	return ret0
}

// IndexingPhotos indicates an expected call of IndexingPhotos.
func (mr *MockPhotoImportUseCaseMockRecorder) IndexingPhotos(ctx, rootPath, groupID, userID, extensions, fast interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IndexingPhotos", reflect.TypeOf((*MockPhotoImportUseCase)(nil).IndexingPhotos), ctx, rootPath, groupID, userID, extensions, fast)
}
