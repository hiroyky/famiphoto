// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces/http/graph/model/models_gen.go

// Package mock_model is a generated GoMock package.
package mock_model

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockConnection is a mock of Connection interface.
type MockConnection struct {
	ctrl     *gomock.Controller
	recorder *MockConnectionMockRecorder
}

// MockConnectionMockRecorder is the mock recorder for MockConnection.
type MockConnectionMockRecorder struct {
	mock *MockConnection
}

// NewMockConnection creates a new mock instance.
func NewMockConnection(ctrl *gomock.Controller) *MockConnection {
	mock := &MockConnection{ctrl: ctrl}
	mock.recorder = &MockConnectionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConnection) EXPECT() *MockConnectionMockRecorder {
	return m.recorder
}

// IsConnection mocks base method.
func (m *MockConnection) IsConnection() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IsConnection")
}

// IsConnection indicates an expected call of IsConnection.
func (mr *MockConnectionMockRecorder) IsConnection() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsConnection", reflect.TypeOf((*MockConnection)(nil).IsConnection))
}

// MockEdge is a mock of Edge interface.
type MockEdge struct {
	ctrl     *gomock.Controller
	recorder *MockEdgeMockRecorder
}

// MockEdgeMockRecorder is the mock recorder for MockEdge.
type MockEdgeMockRecorder struct {
	mock *MockEdge
}

// NewMockEdge creates a new mock instance.
func NewMockEdge(ctrl *gomock.Controller) *MockEdge {
	mock := &MockEdge{ctrl: ctrl}
	mock.recorder = &MockEdgeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEdge) EXPECT() *MockEdgeMockRecorder {
	return m.recorder
}

// IsEdge mocks base method.
func (m *MockEdge) IsEdge() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IsEdge")
}

// IsEdge indicates an expected call of IsEdge.
func (mr *MockEdgeMockRecorder) IsEdge() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsEdge", reflect.TypeOf((*MockEdge)(nil).IsEdge))
}

// MockNode is a mock of Node interface.
type MockNode struct {
	ctrl     *gomock.Controller
	recorder *MockNodeMockRecorder
}

// MockNodeMockRecorder is the mock recorder for MockNode.
type MockNodeMockRecorder struct {
	mock *MockNode
}

// NewMockNode creates a new mock instance.
func NewMockNode(ctrl *gomock.Controller) *MockNode {
	mock := &MockNode{ctrl: ctrl}
	mock.recorder = &MockNodeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNode) EXPECT() *MockNodeMockRecorder {
	return m.recorder
}

// IsNode mocks base method.
func (m *MockNode) IsNode() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IsNode")
}

// IsNode indicates an expected call of IsNode.
func (mr *MockNodeMockRecorder) IsNode() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsNode", reflect.TypeOf((*MockNode)(nil).IsNode))
}

// MockPagination is a mock of Pagination interface.
type MockPagination struct {
	ctrl     *gomock.Controller
	recorder *MockPaginationMockRecorder
}

// MockPaginationMockRecorder is the mock recorder for MockPagination.
type MockPaginationMockRecorder struct {
	mock *MockPagination
}

// NewMockPagination creates a new mock instance.
func NewMockPagination(ctrl *gomock.Controller) *MockPagination {
	mock := &MockPagination{ctrl: ctrl}
	mock.recorder = &MockPaginationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPagination) EXPECT() *MockPaginationMockRecorder {
	return m.recorder
}

// IsPagination mocks base method.
func (m *MockPagination) IsPagination() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IsPagination")
}

// IsPagination indicates an expected call of IsPagination.
func (mr *MockPaginationMockRecorder) IsPagination() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsPagination", reflect.TypeOf((*MockPagination)(nil).IsPagination))
}
