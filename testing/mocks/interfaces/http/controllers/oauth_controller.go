// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces/http/controllers/oauth_controller.go

// Package mock_controllers is a generated GoMock package.
package mock_controllers

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	echo "github.com/labstack/echo/v4"
)

// MockOauthController is a mock of OauthController interface.
type MockOauthController struct {
	ctrl     *gomock.Controller
	recorder *MockOauthControllerMockRecorder
}

// MockOauthControllerMockRecorder is the mock recorder for MockOauthController.
type MockOauthControllerMockRecorder struct {
	mock *MockOauthController
}

// NewMockOauthController creates a new mock instance.
func NewMockOauthController(ctrl *gomock.Controller) *MockOauthController {
	mock := &MockOauthController{ctrl: ctrl}
	mock.recorder = &MockOauthControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOauthController) EXPECT() *MockOauthControllerMockRecorder {
	return m.recorder
}

// GetAuthorize mocks base method.
func (m *MockOauthController) GetAuthorize(ctx echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthorize", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetAuthorize indicates an expected call of GetAuthorize.
func (mr *MockOauthControllerMockRecorder) GetAuthorize(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthorize", reflect.TypeOf((*MockOauthController)(nil).GetAuthorize), ctx)
}

// PostAuthorize mocks base method.
func (m *MockOauthController) PostAuthorize(ctx echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostAuthorize", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// PostAuthorize indicates an expected call of PostAuthorize.
func (mr *MockOauthControllerMockRecorder) PostAuthorize(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostAuthorize", reflect.TypeOf((*MockOauthController)(nil).PostAuthorize), ctx)
}

// PostToken mocks base method.
func (m *MockOauthController) PostToken(ctx echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostToken", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// PostToken indicates an expected call of PostToken.
func (mr *MockOauthControllerMockRecorder) PostToken(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostToken", reflect.TypeOf((*MockOauthController)(nil).PostToken), ctx)
}
