// Code generated by MockGen. DO NOT EDIT.
// Source: services/auth_service.go

// Package mock_services is a generated GoMock package.
package mock_services

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	entities "github.com/hiroyky/famiphoto/entities"
)

// MockAuthService is a mock of AuthService interface.
type MockAuthService struct {
	ctrl     *gomock.Controller
	recorder *MockAuthServiceMockRecorder
}

// MockAuthServiceMockRecorder is the mock recorder for MockAuthService.
type MockAuthServiceMockRecorder struct {
	mock *MockAuthService
}

// NewMockAuthService creates a new mock instance.
func NewMockAuthService(ctrl *gomock.Controller) *MockAuthService {
	mock := &MockAuthService{ctrl: ctrl}
	mock.recorder = &MockAuthServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthService) EXPECT() *MockAuthServiceMockRecorder {
	return m.recorder
}

// AuthByRefreshToken mocks base method.
func (m *MockAuthService) AuthByRefreshToken(ctx context.Context, clientID, refreshToken string) (*entities.UserAuth, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthByRefreshToken", ctx, clientID, refreshToken)
	ret0, _ := ret[0].(*entities.UserAuth)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthByRefreshToken indicates an expected call of AuthByRefreshToken.
func (mr *MockAuthServiceMockRecorder) AuthByRefreshToken(ctx, clientID, refreshToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthByRefreshToken", reflect.TypeOf((*MockAuthService)(nil).AuthByRefreshToken), ctx, clientID, refreshToken)
}

// AuthClient mocks base method.
func (m *MockAuthService) AuthClient(ctx context.Context, clientID, clientSecret string) (*entities.OauthClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthClient", ctx, clientID, clientSecret)
	ret0, _ := ret[0].(*entities.OauthClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthClient indicates an expected call of AuthClient.
func (mr *MockAuthServiceMockRecorder) AuthClient(ctx, clientID, clientSecret interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthClient", reflect.TypeOf((*MockAuthService)(nil).AuthClient), ctx, clientID, clientSecret)
}

// AuthCode mocks base method.
func (m *MockAuthService) AuthCode(ctx context.Context, client *entities.OauthClient, code, redirectURL string) (*entities.OAuthCode, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthCode", ctx, client, code, redirectURL)
	ret0, _ := ret[0].(*entities.OAuthCode)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthCode indicates an expected call of AuthCode.
func (mr *MockAuthServiceMockRecorder) AuthCode(ctx, client, code, redirectURL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthCode", reflect.TypeOf((*MockAuthService)(nil).AuthCode), ctx, client, code, redirectURL)
}

// CreateClient mocks base method.
func (m *MockAuthService) CreateClient(ctx context.Context, client *entities.OauthClient) (*entities.OauthClient, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateClient", ctx, client)
	ret0, _ := ret[0].(*entities.OauthClient)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateClient indicates an expected call of CreateClient.
func (mr *MockAuthServiceMockRecorder) CreateClient(ctx, client interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClient", reflect.TypeOf((*MockAuthService)(nil).CreateClient), ctx, client)
}

// GetOAuthClientRedirectURLsByOAuthClientID mocks base method.
func (m *MockAuthService) GetOAuthClientRedirectURLsByOAuthClientID(ctx context.Context, clientID string) (entities.OAuthClientRedirectURLList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOAuthClientRedirectURLsByOAuthClientID", ctx, clientID)
	ret0, _ := ret[0].(entities.OAuthClientRedirectURLList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOAuthClientRedirectURLsByOAuthClientID indicates an expected call of GetOAuthClientRedirectURLsByOAuthClientID.
func (mr *MockAuthServiceMockRecorder) GetOAuthClientRedirectURLsByOAuthClientID(ctx, clientID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOAuthClientRedirectURLsByOAuthClientID", reflect.TypeOf((*MockAuthService)(nil).GetOAuthClientRedirectURLsByOAuthClientID), ctx, clientID)
}

// GetSession mocks base method.
func (m *MockAuthService) GetSession(ctx context.Context, accessToken string) (*entities.OauthSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSession", ctx, accessToken)
	ret0, _ := ret[0].(*entities.OauthSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSession indicates an expected call of GetSession.
func (mr *MockAuthServiceMockRecorder) GetSession(ctx, accessToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSession", reflect.TypeOf((*MockAuthService)(nil).GetSession), ctx, accessToken)
}

// GetUserClient mocks base method.
func (m *MockAuthService) GetUserClient(ctx context.Context, clientID string) (*entities.OauthClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserClient", ctx, clientID)
	ret0, _ := ret[0].(*entities.OauthClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserClient indicates an expected call of GetUserClient.
func (mr *MockAuthServiceMockRecorder) GetUserClient(ctx, clientID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserClient", reflect.TypeOf((*MockAuthService)(nil).GetUserClient), ctx, clientID)
}

// PublishAuthCode mocks base method.
func (m *MockAuthService) PublishAuthCode(ctx context.Context, clientID, userID, redirectURL string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishAuthCode", ctx, clientID, userID, redirectURL)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PublishAuthCode indicates an expected call of PublishAuthCode.
func (mr *MockAuthServiceMockRecorder) PublishAuthCode(ctx, clientID, userID, redirectURL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishAuthCode", reflect.TypeOf((*MockAuthService)(nil).PublishAuthCode), ctx, clientID, userID, redirectURL)
}

// PublishCCAccessToken mocks base method.
func (m *MockAuthService) PublishCCAccessToken(ctx context.Context, client *entities.OauthClient) (string, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishCCAccessToken", ctx, client)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// PublishCCAccessToken indicates an expected call of PublishCCAccessToken.
func (mr *MockAuthServiceMockRecorder) PublishCCAccessToken(ctx, client interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishCCAccessToken", reflect.TypeOf((*MockAuthService)(nil).PublishCCAccessToken), ctx, client)
}

// PublishUserAccessToken mocks base method.
func (m *MockAuthService) PublishUserAccessToken(ctx context.Context, client *entities.OauthClient, userID string) (string, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishUserAccessToken", ctx, client, userID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// PublishUserAccessToken indicates an expected call of PublishUserAccessToken.
func (mr *MockAuthServiceMockRecorder) PublishUserAccessToken(ctx, client, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishUserAccessToken", reflect.TypeOf((*MockAuthService)(nil).PublishUserAccessToken), ctx, client, userID)
}

// UpsertUserAuth mocks base method.
func (m *MockAuthService) UpsertUserAuth(ctx context.Context, clientID, userID string, now time.Time) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertUserAuth", ctx, clientID, userID, now)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertUserAuth indicates an expected call of UpsertUserAuth.
func (mr *MockAuthServiceMockRecorder) UpsertUserAuth(ctx, clientID, userID, now interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertUserAuth", reflect.TypeOf((*MockAuthService)(nil).UpsertUserAuth), ctx, clientID, userID, now)
}

// ValidateRedirectURL mocks base method.
func (m *MockAuthService) ValidateRedirectURL(ctx context.Context, clientID, redirectURL string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateRedirectURL", ctx, clientID, redirectURL)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateRedirectURL indicates an expected call of ValidateRedirectURL.
func (mr *MockAuthServiceMockRecorder) ValidateRedirectURL(ctx, clientID, redirectURL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateRedirectURL", reflect.TypeOf((*MockAuthService)(nil).ValidateRedirectURL), ctx, clientID, redirectURL)
}

// ValidateToCreateClient mocks base method.
func (m *MockAuthService) ValidateToCreateClient(ctx context.Context, client *entities.OauthClient) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateToCreateClient", ctx, client)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateToCreateClient indicates an expected call of ValidateToCreateClient.
func (mr *MockAuthServiceMockRecorder) ValidateToCreateClient(ctx, client interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateToCreateClient", reflect.TypeOf((*MockAuthService)(nil).ValidateToCreateClient), ctx, client)
}
