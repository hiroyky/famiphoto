// Code generated by SQLBoiler 4.14.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbmodels

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// OauthClient is an object representing the database table.
type OauthClient struct {
	OauthClientID string    `boil:"oauth_client_id" json:"oauth_client_id" toml:"oauth_client_id" yaml:"oauth_client_id"`
	Name          string    `boil:"name" json:"name" toml:"name" yaml:"name"`
	ClientSecret  string    `boil:"client_secret" json:"client_secret" toml:"client_secret" yaml:"client_secret"`
	Scope         string    `boil:"scope" json:"scope" toml:"scope" yaml:"scope"`
	ClientType    int       `boil:"client_type" json:"client_type" toml:"client_type" yaml:"client_type"`
	CreatedAt     time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt     time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *oauthClientR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L oauthClientL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var OauthClientColumns = struct {
	OauthClientID string
	Name          string
	ClientSecret  string
	Scope         string
	ClientType    string
	CreatedAt     string
	UpdatedAt     string
}{
	OauthClientID: "oauth_client_id",
	Name:          "name",
	ClientSecret:  "client_secret",
	Scope:         "scope",
	ClientType:    "client_type",
	CreatedAt:     "created_at",
	UpdatedAt:     "updated_at",
}

var OauthClientTableColumns = struct {
	OauthClientID string
	Name          string
	ClientSecret  string
	Scope         string
	ClientType    string
	CreatedAt     string
	UpdatedAt     string
}{
	OauthClientID: "oauth_clients.oauth_client_id",
	Name:          "oauth_clients.name",
	ClientSecret:  "oauth_clients.client_secret",
	Scope:         "oauth_clients.scope",
	ClientType:    "oauth_clients.client_type",
	CreatedAt:     "oauth_clients.created_at",
	UpdatedAt:     "oauth_clients.updated_at",
}

// Generated where

var OauthClientWhere = struct {
	OauthClientID whereHelperstring
	Name          whereHelperstring
	ClientSecret  whereHelperstring
	Scope         whereHelperstring
	ClientType    whereHelperint
	CreatedAt     whereHelpertime_Time
	UpdatedAt     whereHelpertime_Time
}{
	OauthClientID: whereHelperstring{field: "`oauth_clients`.`oauth_client_id`"},
	Name:          whereHelperstring{field: "`oauth_clients`.`name`"},
	ClientSecret:  whereHelperstring{field: "`oauth_clients`.`client_secret`"},
	Scope:         whereHelperstring{field: "`oauth_clients`.`scope`"},
	ClientType:    whereHelperint{field: "`oauth_clients`.`client_type`"},
	CreatedAt:     whereHelpertime_Time{field: "`oauth_clients`.`created_at`"},
	UpdatedAt:     whereHelpertime_Time{field: "`oauth_clients`.`updated_at`"},
}

// OauthClientRels is where relationship names are stored.
var OauthClientRels = struct {
	OauthClientRedirectUrls string
	UserAuths               string
}{
	OauthClientRedirectUrls: "OauthClientRedirectUrls",
	UserAuths:               "UserAuths",
}

// oauthClientR is where relationships are stored.
type oauthClientR struct {
	OauthClientRedirectUrls OauthClientRedirectURLSlice `boil:"OauthClientRedirectUrls" json:"OauthClientRedirectUrls" toml:"OauthClientRedirectUrls" yaml:"OauthClientRedirectUrls"`
	UserAuths               UserAuthSlice               `boil:"UserAuths" json:"UserAuths" toml:"UserAuths" yaml:"UserAuths"`
}

// NewStruct creates a new relationship struct
func (*oauthClientR) NewStruct() *oauthClientR {
	return &oauthClientR{}
}

func (r *oauthClientR) GetOauthClientRedirectUrls() OauthClientRedirectURLSlice {
	if r == nil {
		return nil
	}
	return r.OauthClientRedirectUrls
}

func (r *oauthClientR) GetUserAuths() UserAuthSlice {
	if r == nil {
		return nil
	}
	return r.UserAuths
}

// oauthClientL is where Load methods for each relationship are stored.
type oauthClientL struct{}

var (
	oauthClientAllColumns            = []string{"oauth_client_id", "name", "client_secret", "scope", "client_type", "created_at", "updated_at"}
	oauthClientColumnsWithoutDefault = []string{"oauth_client_id", "name", "client_secret", "scope", "client_type"}
	oauthClientColumnsWithDefault    = []string{"created_at", "updated_at"}
	oauthClientPrimaryKeyColumns     = []string{"oauth_client_id"}
	oauthClientGeneratedColumns      = []string{}
)

type (
	// OauthClientSlice is an alias for a slice of pointers to OauthClient.
	// This should almost always be used instead of []OauthClient.
	OauthClientSlice []*OauthClient
	// OauthClientHook is the signature for custom OauthClient hook methods
	OauthClientHook func(context.Context, boil.ContextExecutor, *OauthClient) error

	oauthClientQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	oauthClientType                 = reflect.TypeOf(&OauthClient{})
	oauthClientMapping              = queries.MakeStructMapping(oauthClientType)
	oauthClientPrimaryKeyMapping, _ = queries.BindMapping(oauthClientType, oauthClientMapping, oauthClientPrimaryKeyColumns)
	oauthClientInsertCacheMut       sync.RWMutex
	oauthClientInsertCache          = make(map[string]insertCache)
	oauthClientUpdateCacheMut       sync.RWMutex
	oauthClientUpdateCache          = make(map[string]updateCache)
	oauthClientUpsertCacheMut       sync.RWMutex
	oauthClientUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var oauthClientAfterSelectHooks []OauthClientHook

var oauthClientBeforeInsertHooks []OauthClientHook
var oauthClientAfterInsertHooks []OauthClientHook

var oauthClientBeforeUpdateHooks []OauthClientHook
var oauthClientAfterUpdateHooks []OauthClientHook

var oauthClientBeforeDeleteHooks []OauthClientHook
var oauthClientAfterDeleteHooks []OauthClientHook

var oauthClientBeforeUpsertHooks []OauthClientHook
var oauthClientAfterUpsertHooks []OauthClientHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *OauthClient) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range oauthClientAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *OauthClient) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range oauthClientBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *OauthClient) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range oauthClientAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *OauthClient) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range oauthClientBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *OauthClient) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range oauthClientAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *OauthClient) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range oauthClientBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *OauthClient) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range oauthClientAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *OauthClient) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range oauthClientBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *OauthClient) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range oauthClientAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddOauthClientHook registers your hook function for all future operations.
func AddOauthClientHook(hookPoint boil.HookPoint, oauthClientHook OauthClientHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		oauthClientAfterSelectHooks = append(oauthClientAfterSelectHooks, oauthClientHook)
	case boil.BeforeInsertHook:
		oauthClientBeforeInsertHooks = append(oauthClientBeforeInsertHooks, oauthClientHook)
	case boil.AfterInsertHook:
		oauthClientAfterInsertHooks = append(oauthClientAfterInsertHooks, oauthClientHook)
	case boil.BeforeUpdateHook:
		oauthClientBeforeUpdateHooks = append(oauthClientBeforeUpdateHooks, oauthClientHook)
	case boil.AfterUpdateHook:
		oauthClientAfterUpdateHooks = append(oauthClientAfterUpdateHooks, oauthClientHook)
	case boil.BeforeDeleteHook:
		oauthClientBeforeDeleteHooks = append(oauthClientBeforeDeleteHooks, oauthClientHook)
	case boil.AfterDeleteHook:
		oauthClientAfterDeleteHooks = append(oauthClientAfterDeleteHooks, oauthClientHook)
	case boil.BeforeUpsertHook:
		oauthClientBeforeUpsertHooks = append(oauthClientBeforeUpsertHooks, oauthClientHook)
	case boil.AfterUpsertHook:
		oauthClientAfterUpsertHooks = append(oauthClientAfterUpsertHooks, oauthClientHook)
	}
}

// One returns a single oauthClient record from the query.
func (q oauthClientQuery) One(ctx context.Context, exec boil.ContextExecutor) (*OauthClient, error) {
	o := &OauthClient{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodels: failed to execute a one query for oauth_clients")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all OauthClient records from the query.
func (q oauthClientQuery) All(ctx context.Context, exec boil.ContextExecutor) (OauthClientSlice, error) {
	var o []*OauthClient

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "dbmodels: failed to assign all query results to OauthClient slice")
	}

	if len(oauthClientAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all OauthClient records in the query.
func (q oauthClientQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to count oauth_clients rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q oauthClientQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "dbmodels: failed to check if oauth_clients exists")
	}

	return count > 0, nil
}

// OauthClientRedirectUrls retrieves all the oauth_client_redirect_url's OauthClientRedirectUrls with an executor.
func (o *OauthClient) OauthClientRedirectUrls(mods ...qm.QueryMod) oauthClientRedirectURLQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`oauth_client_redirect_urls`.`oauth_client_id`=?", o.OauthClientID),
	)

	return OauthClientRedirectUrls(queryMods...)
}

// UserAuths retrieves all the user_auth's UserAuths with an executor.
func (o *OauthClient) UserAuths(mods ...qm.QueryMod) userAuthQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`user_auth`.`oauth_client_id`=?", o.OauthClientID),
	)

	return UserAuths(queryMods...)
}

// LoadOauthClientRedirectUrls allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (oauthClientL) LoadOauthClientRedirectUrls(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOauthClient interface{}, mods queries.Applicator) error {
	var slice []*OauthClient
	var object *OauthClient

	if singular {
		var ok bool
		object, ok = maybeOauthClient.(*OauthClient)
		if !ok {
			object = new(OauthClient)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeOauthClient)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeOauthClient))
			}
		}
	} else {
		s, ok := maybeOauthClient.(*[]*OauthClient)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeOauthClient)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeOauthClient))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &oauthClientR{}
		}
		args = append(args, object.OauthClientID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &oauthClientR{}
			}

			for _, a := range args {
				if a == obj.OauthClientID {
					continue Outer
				}
			}

			args = append(args, obj.OauthClientID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`oauth_client_redirect_urls`),
		qm.WhereIn(`oauth_client_redirect_urls.oauth_client_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load oauth_client_redirect_urls")
	}

	var resultSlice []*OauthClientRedirectURL
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice oauth_client_redirect_urls")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on oauth_client_redirect_urls")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for oauth_client_redirect_urls")
	}

	if len(oauthClientRedirectURLAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.OauthClientRedirectUrls = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &oauthClientRedirectURLR{}
			}
			foreign.R.OauthClient = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.OauthClientID == foreign.OauthClientID {
				local.R.OauthClientRedirectUrls = append(local.R.OauthClientRedirectUrls, foreign)
				if foreign.R == nil {
					foreign.R = &oauthClientRedirectURLR{}
				}
				foreign.R.OauthClient = local
				break
			}
		}
	}

	return nil
}

// LoadUserAuths allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (oauthClientL) LoadUserAuths(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOauthClient interface{}, mods queries.Applicator) error {
	var slice []*OauthClient
	var object *OauthClient

	if singular {
		var ok bool
		object, ok = maybeOauthClient.(*OauthClient)
		if !ok {
			object = new(OauthClient)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeOauthClient)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeOauthClient))
			}
		}
	} else {
		s, ok := maybeOauthClient.(*[]*OauthClient)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeOauthClient)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeOauthClient))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &oauthClientR{}
		}
		args = append(args, object.OauthClientID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &oauthClientR{}
			}

			for _, a := range args {
				if a == obj.OauthClientID {
					continue Outer
				}
			}

			args = append(args, obj.OauthClientID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`user_auth`),
		qm.WhereIn(`user_auth.oauth_client_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load user_auth")
	}

	var resultSlice []*UserAuth
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice user_auth")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on user_auth")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_auth")
	}

	if len(userAuthAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.UserAuths = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &userAuthR{}
			}
			foreign.R.OauthClient = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.OauthClientID == foreign.OauthClientID {
				local.R.UserAuths = append(local.R.UserAuths, foreign)
				if foreign.R == nil {
					foreign.R = &userAuthR{}
				}
				foreign.R.OauthClient = local
				break
			}
		}
	}

	return nil
}

// AddOauthClientRedirectUrls adds the given related objects to the existing relationships
// of the oauth_client, optionally inserting them as new records.
// Appends related to o.R.OauthClientRedirectUrls.
// Sets related.R.OauthClient appropriately.
func (o *OauthClient) AddOauthClientRedirectUrls(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*OauthClientRedirectURL) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.OauthClientID = o.OauthClientID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `oauth_client_redirect_urls` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"oauth_client_id"}),
				strmangle.WhereClause("`", "`", 0, oauthClientRedirectURLPrimaryKeyColumns),
			)
			values := []interface{}{o.OauthClientID, rel.OauthClientRedirectURLID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.OauthClientID = o.OauthClientID
		}
	}

	if o.R == nil {
		o.R = &oauthClientR{
			OauthClientRedirectUrls: related,
		}
	} else {
		o.R.OauthClientRedirectUrls = append(o.R.OauthClientRedirectUrls, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &oauthClientRedirectURLR{
				OauthClient: o,
			}
		} else {
			rel.R.OauthClient = o
		}
	}
	return nil
}

// AddUserAuths adds the given related objects to the existing relationships
// of the oauth_client, optionally inserting them as new records.
// Appends related to o.R.UserAuths.
// Sets related.R.OauthClient appropriately.
func (o *OauthClient) AddUserAuths(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*UserAuth) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.OauthClientID = o.OauthClientID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `user_auth` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"oauth_client_id"}),
				strmangle.WhereClause("`", "`", 0, userAuthPrimaryKeyColumns),
			)
			values := []interface{}{o.OauthClientID, rel.UserID, rel.OauthClientID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.OauthClientID = o.OauthClientID
		}
	}

	if o.R == nil {
		o.R = &oauthClientR{
			UserAuths: related,
		}
	} else {
		o.R.UserAuths = append(o.R.UserAuths, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &userAuthR{
				OauthClient: o,
			}
		} else {
			rel.R.OauthClient = o
		}
	}
	return nil
}

// OauthClients retrieves all the records using an executor.
func OauthClients(mods ...qm.QueryMod) oauthClientQuery {
	mods = append(mods, qm.From("`oauth_clients`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`oauth_clients`.*"})
	}

	return oauthClientQuery{q}
}

// FindOauthClient retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindOauthClient(ctx context.Context, exec boil.ContextExecutor, oauthClientID string, selectCols ...string) (*OauthClient, error) {
	oauthClientObj := &OauthClient{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `oauth_clients` where `oauth_client_id`=?", sel,
	)

	q := queries.Raw(query, oauthClientID)

	err := q.Bind(ctx, exec, oauthClientObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodels: unable to select from oauth_clients")
	}

	if err = oauthClientObj.doAfterSelectHooks(ctx, exec); err != nil {
		return oauthClientObj, err
	}

	return oauthClientObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *OauthClient) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("dbmodels: no oauth_clients provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(oauthClientColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	oauthClientInsertCacheMut.RLock()
	cache, cached := oauthClientInsertCache[key]
	oauthClientInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			oauthClientAllColumns,
			oauthClientColumnsWithDefault,
			oauthClientColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(oauthClientType, oauthClientMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(oauthClientType, oauthClientMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `oauth_clients` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `oauth_clients` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `oauth_clients` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, oauthClientPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to insert into oauth_clients")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.OauthClientID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to populate default values for oauth_clients")
	}

CacheNoHooks:
	if !cached {
		oauthClientInsertCacheMut.Lock()
		oauthClientInsertCache[key] = cache
		oauthClientInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the OauthClient.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *OauthClient) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	oauthClientUpdateCacheMut.RLock()
	cache, cached := oauthClientUpdateCache[key]
	oauthClientUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			oauthClientAllColumns,
			oauthClientPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("dbmodels: unable to update oauth_clients, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `oauth_clients` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, oauthClientPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(oauthClientType, oauthClientMapping, append(wl, oauthClientPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update oauth_clients row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by update for oauth_clients")
	}

	if !cached {
		oauthClientUpdateCacheMut.Lock()
		oauthClientUpdateCache[key] = cache
		oauthClientUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q oauthClientQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update all for oauth_clients")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to retrieve rows affected for oauth_clients")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o OauthClientSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("dbmodels: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), oauthClientPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `oauth_clients` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, oauthClientPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update all in oauthClient slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to retrieve rows affected all in update all oauthClient")
	}
	return rowsAff, nil
}

var mySQLOauthClientUniqueColumns = []string{
	"oauth_client_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *OauthClient) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("dbmodels: no oauth_clients provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(oauthClientColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLOauthClientUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	oauthClientUpsertCacheMut.RLock()
	cache, cached := oauthClientUpsertCache[key]
	oauthClientUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			oauthClientAllColumns,
			oauthClientColumnsWithDefault,
			oauthClientColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			oauthClientAllColumns,
			oauthClientPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("dbmodels: unable to upsert oauth_clients, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`oauth_clients`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `oauth_clients` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(oauthClientType, oauthClientMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(oauthClientType, oauthClientMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to upsert for oauth_clients")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(oauthClientType, oauthClientMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to retrieve unique values for oauth_clients")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to populate default values for oauth_clients")
	}

CacheNoHooks:
	if !cached {
		oauthClientUpsertCacheMut.Lock()
		oauthClientUpsertCache[key] = cache
		oauthClientUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single OauthClient record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *OauthClient) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("dbmodels: no OauthClient provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), oauthClientPrimaryKeyMapping)
	sql := "DELETE FROM `oauth_clients` WHERE `oauth_client_id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete from oauth_clients")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by delete for oauth_clients")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q oauthClientQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("dbmodels: no oauthClientQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete all from oauth_clients")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by deleteall for oauth_clients")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o OauthClientSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(oauthClientBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), oauthClientPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `oauth_clients` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, oauthClientPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete all from oauthClient slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by deleteall for oauth_clients")
	}

	if len(oauthClientAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *OauthClient) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindOauthClient(ctx, exec, o.OauthClientID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *OauthClientSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := OauthClientSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), oauthClientPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `oauth_clients`.* FROM `oauth_clients` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, oauthClientPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to reload all in OauthClientSlice")
	}

	*o = slice

	return nil
}

// OauthClientExists checks if the OauthClient row exists.
func OauthClientExists(ctx context.Context, exec boil.ContextExecutor, oauthClientID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `oauth_clients` where `oauth_client_id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, oauthClientID)
	}
	row := exec.QueryRowContext(ctx, sql, oauthClientID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "dbmodels: unable to check if oauth_clients exists")
	}

	return exists, nil
}

// Exists checks if the OauthClient row exists.
func (o *OauthClient) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return OauthClientExists(ctx, exec, o.OauthClientID)
}
