// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbmodels

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Exif is an object representing the database table.
type Exif struct {
	ExifID      int       `boil:"exif_id" json:"exif_id" toml:"exif_id" yaml:"exif_id"`
	PhotoID     int       `boil:"photo_id" json:"photo_id" toml:"photo_id" yaml:"photo_id"`
	TagID       int       `boil:"tag_id" json:"tag_id" toml:"tag_id" yaml:"tag_id"`
	TagName     string    `boil:"tag_name" json:"tag_name" toml:"tag_name" yaml:"tag_name"`
	TagType     string    `boil:"tag_type" json:"tag_type" toml:"tag_type" yaml:"tag_type"`
	ValueString string    `boil:"value_string" json:"value_string" toml:"value_string" yaml:"value_string"`
	SortOrder   int       `boil:"sort_order" json:"sort_order" toml:"sort_order" yaml:"sort_order"`
	CreatedAt   time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt   time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *exifR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L exifL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ExifColumns = struct {
	ExifID      string
	PhotoID     string
	TagID       string
	TagName     string
	TagType     string
	ValueString string
	SortOrder   string
	CreatedAt   string
	UpdatedAt   string
}{
	ExifID:      "exif_id",
	PhotoID:     "photo_id",
	TagID:       "tag_id",
	TagName:     "tag_name",
	TagType:     "tag_type",
	ValueString: "value_string",
	SortOrder:   "sort_order",
	CreatedAt:   "created_at",
	UpdatedAt:   "updated_at",
}

var ExifTableColumns = struct {
	ExifID      string
	PhotoID     string
	TagID       string
	TagName     string
	TagType     string
	ValueString string
	SortOrder   string
	CreatedAt   string
	UpdatedAt   string
}{
	ExifID:      "exif.exif_id",
	PhotoID:     "exif.photo_id",
	TagID:       "exif.tag_id",
	TagName:     "exif.tag_name",
	TagType:     "exif.tag_type",
	ValueString: "exif.value_string",
	SortOrder:   "exif.sort_order",
	CreatedAt:   "exif.created_at",
	UpdatedAt:   "exif.updated_at",
}

// Generated where

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod   { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod   { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod   { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) LIKE(x string) qm.QueryMod  { return qm.Where(w.field+" LIKE ?", x) }
func (w whereHelperstring) NLIKE(x string) qm.QueryMod { return qm.Where(w.field+" NOT LIKE ?", x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var ExifWhere = struct {
	ExifID      whereHelperint
	PhotoID     whereHelperint
	TagID       whereHelperint
	TagName     whereHelperstring
	TagType     whereHelperstring
	ValueString whereHelperstring
	SortOrder   whereHelperint
	CreatedAt   whereHelpertime_Time
	UpdatedAt   whereHelpertime_Time
}{
	ExifID:      whereHelperint{field: "`exif`.`exif_id`"},
	PhotoID:     whereHelperint{field: "`exif`.`photo_id`"},
	TagID:       whereHelperint{field: "`exif`.`tag_id`"},
	TagName:     whereHelperstring{field: "`exif`.`tag_name`"},
	TagType:     whereHelperstring{field: "`exif`.`tag_type`"},
	ValueString: whereHelperstring{field: "`exif`.`value_string`"},
	SortOrder:   whereHelperint{field: "`exif`.`sort_order`"},
	CreatedAt:   whereHelpertime_Time{field: "`exif`.`created_at`"},
	UpdatedAt:   whereHelpertime_Time{field: "`exif`.`updated_at`"},
}

// ExifRels is where relationship names are stored.
var ExifRels = struct {
	Photo string
}{
	Photo: "Photo",
}

// exifR is where relationships are stored.
type exifR struct {
	Photo *Photo `boil:"Photo" json:"Photo" toml:"Photo" yaml:"Photo"`
}

// NewStruct creates a new relationship struct
func (*exifR) NewStruct() *exifR {
	return &exifR{}
}

func (r *exifR) GetPhoto() *Photo {
	if r == nil {
		return nil
	}
	return r.Photo
}

// exifL is where Load methods for each relationship are stored.
type exifL struct{}

var (
	exifAllColumns            = []string{"exif_id", "photo_id", "tag_id", "tag_name", "tag_type", "value_string", "sort_order", "created_at", "updated_at"}
	exifColumnsWithoutDefault = []string{"photo_id", "tag_id", "tag_name", "tag_type", "value_string", "sort_order"}
	exifColumnsWithDefault    = []string{"exif_id", "created_at", "updated_at"}
	exifPrimaryKeyColumns     = []string{"exif_id"}
	exifGeneratedColumns      = []string{}
)

type (
	// ExifSlice is an alias for a slice of pointers to Exif.
	// This should almost always be used instead of []Exif.
	ExifSlice []*Exif
	// ExifHook is the signature for custom Exif hook methods
	ExifHook func(context.Context, boil.ContextExecutor, *Exif) error

	exifQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	exifType                 = reflect.TypeOf(&Exif{})
	exifMapping              = queries.MakeStructMapping(exifType)
	exifPrimaryKeyMapping, _ = queries.BindMapping(exifType, exifMapping, exifPrimaryKeyColumns)
	exifInsertCacheMut       sync.RWMutex
	exifInsertCache          = make(map[string]insertCache)
	exifUpdateCacheMut       sync.RWMutex
	exifUpdateCache          = make(map[string]updateCache)
	exifUpsertCacheMut       sync.RWMutex
	exifUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var exifAfterSelectHooks []ExifHook

var exifBeforeInsertHooks []ExifHook
var exifAfterInsertHooks []ExifHook

var exifBeforeUpdateHooks []ExifHook
var exifAfterUpdateHooks []ExifHook

var exifBeforeDeleteHooks []ExifHook
var exifAfterDeleteHooks []ExifHook

var exifBeforeUpsertHooks []ExifHook
var exifAfterUpsertHooks []ExifHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Exif) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range exifAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Exif) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range exifBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Exif) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range exifAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Exif) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range exifBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Exif) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range exifAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Exif) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range exifBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Exif) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range exifAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Exif) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range exifBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Exif) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range exifAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddExifHook registers your hook function for all future operations.
func AddExifHook(hookPoint boil.HookPoint, exifHook ExifHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		exifAfterSelectHooks = append(exifAfterSelectHooks, exifHook)
	case boil.BeforeInsertHook:
		exifBeforeInsertHooks = append(exifBeforeInsertHooks, exifHook)
	case boil.AfterInsertHook:
		exifAfterInsertHooks = append(exifAfterInsertHooks, exifHook)
	case boil.BeforeUpdateHook:
		exifBeforeUpdateHooks = append(exifBeforeUpdateHooks, exifHook)
	case boil.AfterUpdateHook:
		exifAfterUpdateHooks = append(exifAfterUpdateHooks, exifHook)
	case boil.BeforeDeleteHook:
		exifBeforeDeleteHooks = append(exifBeforeDeleteHooks, exifHook)
	case boil.AfterDeleteHook:
		exifAfterDeleteHooks = append(exifAfterDeleteHooks, exifHook)
	case boil.BeforeUpsertHook:
		exifBeforeUpsertHooks = append(exifBeforeUpsertHooks, exifHook)
	case boil.AfterUpsertHook:
		exifAfterUpsertHooks = append(exifAfterUpsertHooks, exifHook)
	}
}

// One returns a single exif record from the query.
func (q exifQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Exif, error) {
	o := &Exif{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodels: failed to execute a one query for exif")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Exif records from the query.
func (q exifQuery) All(ctx context.Context, exec boil.ContextExecutor) (ExifSlice, error) {
	var o []*Exif

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "dbmodels: failed to assign all query results to Exif slice")
	}

	if len(exifAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Exif records in the query.
func (q exifQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to count exif rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q exifQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "dbmodels: failed to check if exif exists")
	}

	return count > 0, nil
}

// Photo pointed to by the foreign key.
func (o *Exif) Photo(mods ...qm.QueryMod) photoQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`photo_id` = ?", o.PhotoID),
	}

	queryMods = append(queryMods, mods...)

	return Photos(queryMods...)
}

// LoadPhoto allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (exifL) LoadPhoto(ctx context.Context, e boil.ContextExecutor, singular bool, maybeExif interface{}, mods queries.Applicator) error {
	var slice []*Exif
	var object *Exif

	if singular {
		var ok bool
		object, ok = maybeExif.(*Exif)
		if !ok {
			object = new(Exif)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeExif)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeExif))
			}
		}
	} else {
		s, ok := maybeExif.(*[]*Exif)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeExif)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeExif))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &exifR{}
		}
		args = append(args, object.PhotoID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &exifR{}
			}

			for _, a := range args {
				if a == obj.PhotoID {
					continue Outer
				}
			}

			args = append(args, obj.PhotoID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`photos`),
		qm.WhereIn(`photos.photo_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Photo")
	}

	var resultSlice []*Photo
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Photo")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for photos")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for photos")
	}

	if len(photoAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Photo = foreign
		if foreign.R == nil {
			foreign.R = &photoR{}
		}
		foreign.R.Exifs = append(foreign.R.Exifs, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PhotoID == foreign.PhotoID {
				local.R.Photo = foreign
				if foreign.R == nil {
					foreign.R = &photoR{}
				}
				foreign.R.Exifs = append(foreign.R.Exifs, local)
				break
			}
		}
	}

	return nil
}

// SetPhoto of the exif to the related item.
// Sets o.R.Photo to related.
// Adds o to related.R.Exifs.
func (o *Exif) SetPhoto(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Photo) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `exif` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"photo_id"}),
		strmangle.WhereClause("`", "`", 0, exifPrimaryKeyColumns),
	)
	values := []interface{}{related.PhotoID, o.ExifID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PhotoID = related.PhotoID
	if o.R == nil {
		o.R = &exifR{
			Photo: related,
		}
	} else {
		o.R.Photo = related
	}

	if related.R == nil {
		related.R = &photoR{
			Exifs: ExifSlice{o},
		}
	} else {
		related.R.Exifs = append(related.R.Exifs, o)
	}

	return nil
}

// Exifs retrieves all the records using an executor.
func Exifs(mods ...qm.QueryMod) exifQuery {
	mods = append(mods, qm.From("`exif`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`exif`.*"})
	}

	return exifQuery{q}
}

// FindExif retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindExif(ctx context.Context, exec boil.ContextExecutor, exifID int, selectCols ...string) (*Exif, error) {
	exifObj := &Exif{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `exif` where `exif_id`=?", sel,
	)

	q := queries.Raw(query, exifID)

	err := q.Bind(ctx, exec, exifObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodels: unable to select from exif")
	}

	if err = exifObj.doAfterSelectHooks(ctx, exec); err != nil {
		return exifObj, err
	}

	return exifObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Exif) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("dbmodels: no exif provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(exifColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	exifInsertCacheMut.RLock()
	cache, cached := exifInsertCache[key]
	exifInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			exifAllColumns,
			exifColumnsWithDefault,
			exifColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(exifType, exifMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(exifType, exifMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `exif` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `exif` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `exif` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, exifPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to insert into exif")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ExifID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == exifMapping["exif_id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ExifID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to populate default values for exif")
	}

CacheNoHooks:
	if !cached {
		exifInsertCacheMut.Lock()
		exifInsertCache[key] = cache
		exifInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Exif.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Exif) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	exifUpdateCacheMut.RLock()
	cache, cached := exifUpdateCache[key]
	exifUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			exifAllColumns,
			exifPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("dbmodels: unable to update exif, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `exif` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, exifPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(exifType, exifMapping, append(wl, exifPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update exif row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by update for exif")
	}

	if !cached {
		exifUpdateCacheMut.Lock()
		exifUpdateCache[key] = cache
		exifUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q exifQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update all for exif")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to retrieve rows affected for exif")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ExifSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("dbmodels: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), exifPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `exif` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, exifPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update all in exif slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to retrieve rows affected all in update all exif")
	}
	return rowsAff, nil
}

var mySQLExifUniqueColumns = []string{
	"exif_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Exif) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("dbmodels: no exif provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(exifColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLExifUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	exifUpsertCacheMut.RLock()
	cache, cached := exifUpsertCache[key]
	exifUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			exifAllColumns,
			exifColumnsWithDefault,
			exifColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			exifAllColumns,
			exifPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("dbmodels: unable to upsert exif, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`exif`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `exif` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(exifType, exifMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(exifType, exifMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to upsert for exif")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ExifID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == exifMapping["exif_id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(exifType, exifMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to retrieve unique values for exif")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to populate default values for exif")
	}

CacheNoHooks:
	if !cached {
		exifUpsertCacheMut.Lock()
		exifUpsertCache[key] = cache
		exifUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Exif record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Exif) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("dbmodels: no Exif provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), exifPrimaryKeyMapping)
	sql := "DELETE FROM `exif` WHERE `exif_id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete from exif")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by delete for exif")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q exifQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("dbmodels: no exifQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete all from exif")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by deleteall for exif")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ExifSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(exifBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), exifPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `exif` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, exifPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete all from exif slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by deleteall for exif")
	}

	if len(exifAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Exif) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindExif(ctx, exec, o.ExifID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ExifSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ExifSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), exifPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `exif`.* FROM `exif` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, exifPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to reload all in ExifSlice")
	}

	*o = slice

	return nil
}

// ExifExists checks if the Exif row exists.
func ExifExists(ctx context.Context, exec boil.ContextExecutor, exifID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `exif` where `exif_id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, exifID)
	}
	row := exec.QueryRowContext(ctx, sql, exifID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "dbmodels: unable to check if exif exists")
	}

	return exists, nil
}

// Exists checks if the Exif row exists.
func (o *Exif) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ExifExists(ctx, exec, o.ExifID)
}
