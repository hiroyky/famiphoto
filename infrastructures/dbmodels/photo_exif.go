// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbmodels

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// PhotoExif is an object representing the database table.
type PhotoExif struct {
	PhotoID   int       `boil:"photo_id" json:"photo_id" toml:"photo_id" yaml:"photo_id"`
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *photoExifR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L photoExifL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PhotoExifColumns = struct {
	PhotoID   string
	CreatedAt string
	UpdatedAt string
}{
	PhotoID:   "photo_id",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
}

var PhotoExifTableColumns = struct {
	PhotoID   string
	CreatedAt string
	UpdatedAt string
}{
	PhotoID:   "photo_exif.photo_id",
	CreatedAt: "photo_exif.created_at",
	UpdatedAt: "photo_exif.updated_at",
}

// Generated where

var PhotoExifWhere = struct {
	PhotoID   whereHelperint
	CreatedAt whereHelpertime_Time
	UpdatedAt whereHelpertime_Time
}{
	PhotoID:   whereHelperint{field: "`photo_exif`.`photo_id`"},
	CreatedAt: whereHelpertime_Time{field: "`photo_exif`.`created_at`"},
	UpdatedAt: whereHelpertime_Time{field: "`photo_exif`.`updated_at`"},
}

// PhotoExifRels is where relationship names are stored.
var PhotoExifRels = struct {
	Photo string
}{
	Photo: "Photo",
}

// photoExifR is where relationships are stored.
type photoExifR struct {
	Photo *Photo `boil:"Photo" json:"Photo" toml:"Photo" yaml:"Photo"`
}

// NewStruct creates a new relationship struct
func (*photoExifR) NewStruct() *photoExifR {
	return &photoExifR{}
}

// photoExifL is where Load methods for each relationship are stored.
type photoExifL struct{}

var (
	photoExifAllColumns            = []string{"photo_id", "created_at", "updated_at"}
	photoExifColumnsWithoutDefault = []string{"photo_id"}
	photoExifColumnsWithDefault    = []string{"created_at", "updated_at"}
	photoExifPrimaryKeyColumns     = []string{"photo_id"}
	photoExifGeneratedColumns      = []string{}
)

type (
	// PhotoExifSlice is an alias for a slice of pointers to PhotoExif.
	// This should almost always be used instead of []PhotoExif.
	PhotoExifSlice []*PhotoExif
	// PhotoExifHook is the signature for custom PhotoExif hook methods
	PhotoExifHook func(context.Context, boil.ContextExecutor, *PhotoExif) error

	photoExifQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	photoExifType                 = reflect.TypeOf(&PhotoExif{})
	photoExifMapping              = queries.MakeStructMapping(photoExifType)
	photoExifPrimaryKeyMapping, _ = queries.BindMapping(photoExifType, photoExifMapping, photoExifPrimaryKeyColumns)
	photoExifInsertCacheMut       sync.RWMutex
	photoExifInsertCache          = make(map[string]insertCache)
	photoExifUpdateCacheMut       sync.RWMutex
	photoExifUpdateCache          = make(map[string]updateCache)
	photoExifUpsertCacheMut       sync.RWMutex
	photoExifUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var photoExifAfterSelectHooks []PhotoExifHook

var photoExifBeforeInsertHooks []PhotoExifHook
var photoExifAfterInsertHooks []PhotoExifHook

var photoExifBeforeUpdateHooks []PhotoExifHook
var photoExifAfterUpdateHooks []PhotoExifHook

var photoExifBeforeDeleteHooks []PhotoExifHook
var photoExifAfterDeleteHooks []PhotoExifHook

var photoExifBeforeUpsertHooks []PhotoExifHook
var photoExifAfterUpsertHooks []PhotoExifHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *PhotoExif) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range photoExifAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *PhotoExif) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range photoExifBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *PhotoExif) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range photoExifAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *PhotoExif) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range photoExifBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *PhotoExif) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range photoExifAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *PhotoExif) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range photoExifBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *PhotoExif) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range photoExifAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *PhotoExif) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range photoExifBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *PhotoExif) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range photoExifAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPhotoExifHook registers your hook function for all future operations.
func AddPhotoExifHook(hookPoint boil.HookPoint, photoExifHook PhotoExifHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		photoExifAfterSelectHooks = append(photoExifAfterSelectHooks, photoExifHook)
	case boil.BeforeInsertHook:
		photoExifBeforeInsertHooks = append(photoExifBeforeInsertHooks, photoExifHook)
	case boil.AfterInsertHook:
		photoExifAfterInsertHooks = append(photoExifAfterInsertHooks, photoExifHook)
	case boil.BeforeUpdateHook:
		photoExifBeforeUpdateHooks = append(photoExifBeforeUpdateHooks, photoExifHook)
	case boil.AfterUpdateHook:
		photoExifAfterUpdateHooks = append(photoExifAfterUpdateHooks, photoExifHook)
	case boil.BeforeDeleteHook:
		photoExifBeforeDeleteHooks = append(photoExifBeforeDeleteHooks, photoExifHook)
	case boil.AfterDeleteHook:
		photoExifAfterDeleteHooks = append(photoExifAfterDeleteHooks, photoExifHook)
	case boil.BeforeUpsertHook:
		photoExifBeforeUpsertHooks = append(photoExifBeforeUpsertHooks, photoExifHook)
	case boil.AfterUpsertHook:
		photoExifAfterUpsertHooks = append(photoExifAfterUpsertHooks, photoExifHook)
	}
}

// One returns a single photoExif record from the query.
func (q photoExifQuery) One(ctx context.Context, exec boil.ContextExecutor) (*PhotoExif, error) {
	o := &PhotoExif{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodels: failed to execute a one query for photo_exif")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all PhotoExif records from the query.
func (q photoExifQuery) All(ctx context.Context, exec boil.ContextExecutor) (PhotoExifSlice, error) {
	var o []*PhotoExif

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "dbmodels: failed to assign all query results to PhotoExif slice")
	}

	if len(photoExifAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all PhotoExif records in the query.
func (q photoExifQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to count photo_exif rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q photoExifQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "dbmodels: failed to check if photo_exif exists")
	}

	return count > 0, nil
}

// Photo pointed to by the foreign key.
func (o *PhotoExif) Photo(mods ...qm.QueryMod) photoQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`photo_id` = ?", o.PhotoID),
	}

	queryMods = append(queryMods, mods...)

	query := Photos(queryMods...)
	queries.SetFrom(query.Query, "`photos`")

	return query
}

// LoadPhoto allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (photoExifL) LoadPhoto(ctx context.Context, e boil.ContextExecutor, singular bool, maybePhotoExif interface{}, mods queries.Applicator) error {
	var slice []*PhotoExif
	var object *PhotoExif

	if singular {
		object = maybePhotoExif.(*PhotoExif)
	} else {
		slice = *maybePhotoExif.(*[]*PhotoExif)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &photoExifR{}
		}
		args = append(args, object.PhotoID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &photoExifR{}
			}

			for _, a := range args {
				if a == obj.PhotoID {
					continue Outer
				}
			}

			args = append(args, obj.PhotoID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`photos`),
		qm.WhereIn(`photos.photo_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Photo")
	}

	var resultSlice []*Photo
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Photo")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for photos")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for photos")
	}

	if len(photoExifAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Photo = foreign
		if foreign.R == nil {
			foreign.R = &photoR{}
		}
		foreign.R.PhotoExif = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PhotoID == foreign.PhotoID {
				local.R.Photo = foreign
				if foreign.R == nil {
					foreign.R = &photoR{}
				}
				foreign.R.PhotoExif = local
				break
			}
		}
	}

	return nil
}

// SetPhoto of the photoExif to the related item.
// Sets o.R.Photo to related.
// Adds o to related.R.PhotoExif.
func (o *PhotoExif) SetPhoto(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Photo) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `photo_exif` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"photo_id"}),
		strmangle.WhereClause("`", "`", 0, photoExifPrimaryKeyColumns),
	)
	values := []interface{}{related.PhotoID, o.PhotoID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PhotoID = related.PhotoID
	if o.R == nil {
		o.R = &photoExifR{
			Photo: related,
		}
	} else {
		o.R.Photo = related
	}

	if related.R == nil {
		related.R = &photoR{
			PhotoExif: o,
		}
	} else {
		related.R.PhotoExif = o
	}

	return nil
}

// PhotoExifs retrieves all the records using an executor.
func PhotoExifs(mods ...qm.QueryMod) photoExifQuery {
	mods = append(mods, qm.From("`photo_exif`"))
	return photoExifQuery{NewQuery(mods...)}
}

// FindPhotoExif retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPhotoExif(ctx context.Context, exec boil.ContextExecutor, photoID int, selectCols ...string) (*PhotoExif, error) {
	photoExifObj := &PhotoExif{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `photo_exif` where `photo_id`=?", sel,
	)

	q := queries.Raw(query, photoID)

	err := q.Bind(ctx, exec, photoExifObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodels: unable to select from photo_exif")
	}

	if err = photoExifObj.doAfterSelectHooks(ctx, exec); err != nil {
		return photoExifObj, err
	}

	return photoExifObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *PhotoExif) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("dbmodels: no photo_exif provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(photoExifColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	photoExifInsertCacheMut.RLock()
	cache, cached := photoExifInsertCache[key]
	photoExifInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			photoExifAllColumns,
			photoExifColumnsWithDefault,
			photoExifColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(photoExifType, photoExifMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(photoExifType, photoExifMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `photo_exif` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `photo_exif` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `photo_exif` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, photoExifPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to insert into photo_exif")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.PhotoID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to populate default values for photo_exif")
	}

CacheNoHooks:
	if !cached {
		photoExifInsertCacheMut.Lock()
		photoExifInsertCache[key] = cache
		photoExifInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the PhotoExif.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *PhotoExif) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	photoExifUpdateCacheMut.RLock()
	cache, cached := photoExifUpdateCache[key]
	photoExifUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			photoExifAllColumns,
			photoExifPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("dbmodels: unable to update photo_exif, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `photo_exif` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, photoExifPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(photoExifType, photoExifMapping, append(wl, photoExifPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update photo_exif row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by update for photo_exif")
	}

	if !cached {
		photoExifUpdateCacheMut.Lock()
		photoExifUpdateCache[key] = cache
		photoExifUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q photoExifQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update all for photo_exif")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to retrieve rows affected for photo_exif")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PhotoExifSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("dbmodels: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), photoExifPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `photo_exif` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, photoExifPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update all in photoExif slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to retrieve rows affected all in update all photoExif")
	}
	return rowsAff, nil
}

var mySQLPhotoExifUniqueColumns = []string{
	"photo_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *PhotoExif) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("dbmodels: no photo_exif provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(photoExifColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLPhotoExifUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	photoExifUpsertCacheMut.RLock()
	cache, cached := photoExifUpsertCache[key]
	photoExifUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			photoExifAllColumns,
			photoExifColumnsWithDefault,
			photoExifColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			photoExifAllColumns,
			photoExifPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("dbmodels: unable to upsert photo_exif, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`photo_exif`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `photo_exif` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(photoExifType, photoExifMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(photoExifType, photoExifMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to upsert for photo_exif")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(photoExifType, photoExifMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to retrieve unique values for photo_exif")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to populate default values for photo_exif")
	}

CacheNoHooks:
	if !cached {
		photoExifUpsertCacheMut.Lock()
		photoExifUpsertCache[key] = cache
		photoExifUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single PhotoExif record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *PhotoExif) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("dbmodels: no PhotoExif provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), photoExifPrimaryKeyMapping)
	sql := "DELETE FROM `photo_exif` WHERE `photo_id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete from photo_exif")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by delete for photo_exif")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q photoExifQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("dbmodels: no photoExifQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete all from photo_exif")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by deleteall for photo_exif")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PhotoExifSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(photoExifBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), photoExifPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `photo_exif` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, photoExifPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete all from photoExif slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by deleteall for photo_exif")
	}

	if len(photoExifAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *PhotoExif) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPhotoExif(ctx, exec, o.PhotoID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PhotoExifSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PhotoExifSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), photoExifPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `photo_exif`.* FROM `photo_exif` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, photoExifPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to reload all in PhotoExifSlice")
	}

	*o = slice

	return nil
}

// PhotoExifExists checks if the PhotoExif row exists.
func PhotoExifExists(ctx context.Context, exec boil.ContextExecutor, photoID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `photo_exif` where `photo_id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, photoID)
	}
	row := exec.QueryRowContext(ctx, sql, photoID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "dbmodels: unable to check if photo_exif exists")
	}

	return exists, nil
}
