package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.39

import (
	"context"

	"github.com/hiroyky/famiphoto/interfaces/http/graph/generated"
	"github.com/hiroyky/famiphoto/interfaces/http/graph/model"
	"github.com/hiroyky/famiphoto/utils/gql"
)

// ExifData is the resolver for the exifData field.
func (r *photoResolver) ExifData(ctx context.Context, obj *model.Photo) ([]*model.PhotoExif, error) {
	photoID, err := gql.DecodeIntID(obj.ID)
	if err != nil {
		return nil, err
	}
	meta, err := r.photoUseCase.GetPhotoMetaByPhotoID(ctx, photoID)
	if err != nil {
		return nil, err
	}

	return model.NewPhotoExifData(meta), nil
}

// Files is the resolver for the files field.
func (r *photoResolver) Files(ctx context.Context, obj *model.Photo) ([]*model.PhotoFile, error) {
	photoID, err := gql.DecodeIntID(obj.ID)
	if err != nil {
		return nil, err
	}

	files, err := r.photoUseCase.GetPhotoFilesByPhotoID(ctx, photoID)
	if err != nil {
		return nil, err
	}

	return model.NewPhotoFiles(files), nil
}

// Photo returns generated.PhotoResolver implementation.
func (r *Resolver) Photo() generated.PhotoResolver { return &photoResolver{r} }

type photoResolver struct{ *Resolver }
