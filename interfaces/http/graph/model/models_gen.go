// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Connection interface {
	IsConnection()
}

type Edge interface {
	IsEdge()
}

type Node interface {
	IsNode()
}

type Pagination interface {
	IsPagination()
}

type Group struct {
	ID             string          `json:"id"`
	Name           string          `json:"name"`
	UserPagination *UserPagination `json:"userPagination"`
}

func (Group) IsNode() {}

type GroupEdge struct {
	Cursor string `json:"cursor"`
	Node   *Group `json:"node"`
}

func (GroupEdge) IsEdge() {}

type GroupPagination struct {
	PageInfo *PaginationInfo `json:"pageInfo"`
	Edges    []*GroupEdge    `json:"edges"`
	Nodes    []*Group        `json:"nodes"`
}

func (GroupPagination) IsPagination() {}

type PageInfo struct {
	HasNextPage     bool    `json:"hasNextPage"`
	HasPreviousPage bool    `json:"hasPreviousPage"`
	StartCursor     *string `json:"startCursor"`
	EndCursor       *string `json:"endCursor"`
}

type PaginationInfo struct {
	Page             int  `json:"page"`
	PaginationLength int  `json:"paginationLength"`
	HasNextPage      bool `json:"hasNextPage"`
	HasPreviousPage  bool `json:"hasPreviousPage"`
	Count            int  `json:"count"`
	TotalCount       int  `json:"totalCount"`
}

type Photo struct {
	ID         string `json:"id"`
	Name       string `json:"name"`
	FilePath   string `json:"filePath"`
	ImportedAt string `json:"importedAt"`
	GroupID    string `json:"groupId"`
	Group      *Group `json:"group"`
	OwnerID    string `json:"ownerId"`
	Owner      *User  `json:"owner"`
}

func (Photo) IsNode() {}

type User struct {
	ID           string        `json:"id"`
	Name         string        `json:"name"`
	Status       UserStatus    `json:"status"`
	Password     *UserPassword `json:"password"`
	BelongGroups []*Group      `json:"belongGroups"`
}

func (User) IsNode() {}

type UserEdge struct {
	Cursor string `json:"cursor"`
	Node   *User  `json:"node"`
}

func (UserEdge) IsEdge() {}

type UserPagination struct {
	PageInfo *PaginationInfo `json:"pageInfo"`
	Edges    []*UserEdge     `json:"edges"`
	Nodes    []*User         `json:"nodes"`
}

func (UserPagination) IsPagination() {}

type UserPassword struct {
	ID            string `json:"id"`
	LastModified  string `json:"lastModified"`
	IsInitialized bool   `json:"isInitialized"`
}

func (UserPassword) IsNode() {}

type UserStatus string

const (
	UserStatusActive     UserStatus = "Active"
	UserStatusWithdrawal UserStatus = "Withdrawal"
)

var AllUserStatus = []UserStatus{
	UserStatusActive,
	UserStatusWithdrawal,
}

func (e UserStatus) IsValid() bool {
	switch e {
	case UserStatusActive, UserStatusWithdrawal:
		return true
	}
	return false
}

func (e UserStatus) String() string {
	return string(e)
}

func (e *UserStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = UserStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid UserStatus", str)
	}
	return nil
}

func (e UserStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
